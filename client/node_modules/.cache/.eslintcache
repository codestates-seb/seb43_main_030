[{"/Users/jieun/Desktop/main-project/idle/src/index.js":"1","/Users/jieun/Desktop/main-project/idle/src/App.js":"2","/Users/jieun/Desktop/main-project/idle/src/reportWebVitals.js":"3","/Users/jieun/Desktop/main-project/idle/src/store/configureStore.jsx":"4","/Users/jieun/Desktop/main-project/idle/src/pages/Map.jsx":"5","/Users/jieun/Desktop/main-project/idle/src/pages/Post.jsx":"6","/Users/jieun/Desktop/main-project/idle/src/pages/Login.jsx":"7","/Users/jieun/Desktop/main-project/idle/src/components/Footer.jsx":"8","/Users/jieun/Desktop/main-project/idle/src/pages/Main.jsx":"9","/Users/jieun/Desktop/main-project/idle/src/components/Header/MHeader.jsx":"10","/Users/jieun/Desktop/main-project/idle/src/components/Header/PcHeader.jsx":"11","/Users/jieun/Desktop/main-project/idle/src/pages/KinderDetail.jsx":"12","/Users/jieun/Desktop/main-project/idle/src/pages/Write.jsx":"13","/Users/jieun/Desktop/main-project/idle/src/pages/Mypage.jsx":"14","/Users/jieun/Desktop/main-project/idle/src/pages/SignUp.jsx":"15","/Users/jieun/Desktop/main-project/idle/src/pages/Community.jsx":"16","/Users/jieun/Desktop/main-project/idle/src/pages/FindPw.jsx":"17","/Users/jieun/Desktop/main-project/idle/src/pages/NotFound.jsx":"18","/Users/jieun/Desktop/main-project/idle/src/actions/areaFilterActions.jsx":"19","/Users/jieun/Desktop/main-project/idle/src/reducers/areaFilterReducers.jsx":"20","/Users/jieun/Desktop/main-project/idle/src/components/InputBtn.jsx":"21","/Users/jieun/Desktop/main-project/idle/src/components/dateCalculate.jsx":"22","/Users/jieun/Desktop/main-project/idle/src/components/Pagination.jsx":"23","/Users/jieun/Desktop/main-project/idle/src/pages/Modal.jsx":"24","/Users/jieun/Desktop/main-project/idle/src/components/DropDownMenu.jsx":"25","/Users/jieun/Desktop/main-project/idle/src/components/Comment.jsx":"26","/Users/jieun/Desktop/main-project/idle/src/components/Button/Button.jsx":"27","/Users/jieun/Desktop/main-project/idle/src/components/Card/MapCard.jsx":"28","/Users/jieun/Desktop/main-project/idle/src/components/Card/MainCard.jsx":"29","/Users/jieun/Desktop/main-project/idle/src/components/Input/InputSelectBox.jsx":"30","/Users/jieun/Desktop/main-project/idle/src/components/Input/Input.jsx":"31","/Users/jieun/Desktop/main-project/idle/src/components/TextArea.jsx":"32","/Users/jieun/Desktop/main-project/idle/src/utils/util.js":"33","/Users/jieun/Desktop/main-project/idle/src/pages/SettingModal.jsx":"34","/Users/jieun/Desktop/main-project/idle/src/pages/ProfileCreateModal.jsx":"35","/Users/jieun/Desktop/main-project/idle/src/components/List/ListNotice.jsx":"36","/Users/jieun/Desktop/main-project/idle/src/components/List/ListReview.jsx":"37","/Users/jieun/Desktop/main-project/idle/src/components/List/ListCommunity.jsx":"38","/Users/jieun/Desktop/main-project/idle/src/components/List/ConfirmReview.jsx":"39","/Users/jieun/Desktop/main-project/idle/src/components/Radio/RadioGroup.jsx":"40","/Users/jieun/Desktop/main-project/idle/src/components/Radio/Radio.jsx":"41","/Users/jieun/Desktop/main-project/idle/src/utils/tailwind.js":"42","/Users/jieun/Desktop/main-project/idle/src/components/UploadImage.jsx":"43","/Users/jieun/Desktop/main-project/idle/src/components/RatingStar.jsx":"44","/Users/jieun/Desktop/main-project/idle/src/utils/quillEditor.js":"45","/Users/jieun/Desktop/main-project/idle/src/pages/OauthLogin.jsx":"46","/Users/jieun/Desktop/main-project/idle/src/pages/OauthRole.jsx":"47","/Users/jieun/Desktop/main-project/idle/src/utils/dropdown.js":"48","/Users/jieun/Desktop/main-project/idle/src/OffFooter.jsx":"49","/Users/jieun/Desktop/main-project/idle/src/components/OnFooter.jsx":"50","/Users/jieun/Desktop/main-project/idle/src/pages/OauthFail.jsx":"51","/Users/jieun/Desktop/main-project/idle/src/utils/toast.js":"52"},{"size":1177,"mtime":1684826317439,"results":"53","hashOfConfig":"54"},{"size":2339,"mtime":1684888766189,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":1683101297490,"results":"56","hashOfConfig":"54"},{"size":202,"mtime":1684288767248,"results":"57","hashOfConfig":"54"},{"size":5029,"mtime":1684826317441,"results":"58","hashOfConfig":"54"},{"size":14355,"mtime":1684989640532,"results":"59","hashOfConfig":"54"},{"size":6220,"mtime":1684888766191,"results":"60","hashOfConfig":"54"},{"size":2769,"mtime":1684114786185,"results":"61","hashOfConfig":"54"},{"size":6019,"mtime":1684989640531,"results":"62","hashOfConfig":"54"},{"size":3326,"mtime":1684826317437,"results":"63","hashOfConfig":"54"},{"size":3045,"mtime":1684830859906,"results":"64","hashOfConfig":"54"},{"size":14977,"mtime":1684990000474,"results":"65","hashOfConfig":"54"},{"size":9830,"mtime":1684914335234,"results":"66","hashOfConfig":"54"},{"size":22790,"mtime":1684990268827,"results":"67","hashOfConfig":"54"},{"size":11460,"mtime":1684989640533,"results":"68","hashOfConfig":"54"},{"size":7752,"mtime":1684989640531,"results":"69","hashOfConfig":"54"},{"size":8758,"mtime":1684989640531,"results":"70","hashOfConfig":"54"},{"size":593,"mtime":1684888766193,"results":"71","hashOfConfig":"54"},{"size":1210,"mtime":1684826317434,"results":"72","hashOfConfig":"54"},{"size":4105,"mtime":1684826317443,"results":"73","hashOfConfig":"54"},{"size":2959,"mtime":1684826317437,"results":"74","hashOfConfig":"54"},{"size":367,"mtime":1684114786188,"results":"75","hashOfConfig":"54"},{"size":1105,"mtime":1684826317439,"results":"76","hashOfConfig":"54"},{"size":9552,"mtime":1684990052769,"results":"77","hashOfConfig":"54"},{"size":4699,"mtime":1684830589581,"results":"78","hashOfConfig":"54"},{"size":7871,"mtime":1684915482009,"results":"79","hashOfConfig":"54"},{"size":1161,"mtime":1684141628795,"results":"80","hashOfConfig":"54"},{"size":1212,"mtime":1684917481440,"results":"81","hashOfConfig":"54"},{"size":1172,"mtime":1684888766189,"results":"82","hashOfConfig":"54"},{"size":2656,"mtime":1684288767244,"results":"83","hashOfConfig":"54"},{"size":1274,"mtime":1684826317437,"results":"84","hashOfConfig":"54"},{"size":960,"mtime":1684810018361,"results":"85","hashOfConfig":"54"},{"size":2371,"mtime":1684461204756,"results":"86","hashOfConfig":"54"},{"size":10984,"mtime":1684989640533,"results":"87","hashOfConfig":"54"},{"size":10772,"mtime":1684888766194,"results":"88","hashOfConfig":"54"},{"size":1743,"mtime":1684989640530,"results":"89","hashOfConfig":"54"},{"size":4225,"mtime":1684826317438,"results":"90","hashOfConfig":"54"},{"size":3929,"mtime":1684914335234,"results":"91","hashOfConfig":"54"},{"size":9684,"mtime":1684915049895,"results":"92","hashOfConfig":"54"},{"size":216,"mtime":1683807607160,"results":"93","hashOfConfig":"54"},{"size":621,"mtime":1684141628798,"results":"94","hashOfConfig":"54"},{"size":200,"mtime":1683286663632,"results":"95","hashOfConfig":"54"},{"size":2479,"mtime":1684826317439,"results":"96","hashOfConfig":"54"},{"size":1202,"mtime":1684826317439,"results":"97","hashOfConfig":"54"},{"size":2375,"mtime":1684826317444,"results":"98","hashOfConfig":"54"},{"size":1995,"mtime":1684826317441,"results":"99","hashOfConfig":"54"},{"size":5526,"mtime":1684888766193,"results":"100","hashOfConfig":"54"},{"size":2206,"mtime":1684888766194,"results":"101","hashOfConfig":"54"},{"size":51,"mtime":1684823754901,"results":"102","hashOfConfig":"54"},{"size":103,"mtime":1684823700385,"results":"103","hashOfConfig":"54"},{"size":1490,"mtime":1684888766193,"results":"104","hashOfConfig":"54"},{"size":240,"mtime":1684888766194,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nz4ix0",{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"116"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jieun/Desktop/main-project/idle/src/index.js",[],[],"/Users/jieun/Desktop/main-project/idle/src/App.js",["295","296"],[],"import './App.css';\nimport './styles/utilities.css';\nimport { useMediaQuery } from 'react-responsive';\nimport { Routes, Route, useLocation } from 'react-router-dom';\nimport { useState } from 'react';\nimport MHeader from './components/Header/MHeader';\nimport Footer from './components/Footer';\nimport Main from './pages/Main';\nimport PcHeader from './components/Header/PcHeader';\nimport Login from './pages/Login';\nimport Map from './pages/Map';\nimport Community from './pages/Community';\nimport Post from './pages/Post';\nimport Write from './pages/Write';\nimport SignUp from './pages/SignUp';\nimport KinderDetail from './pages/KinderDetail';\nimport Mypage from './pages/Mypage';\nimport NotFound from './pages/NotFound';\nimport FindPw from './pages/FindPw';\nimport OauthLogin from './pages/OauthLogin';\nimport OauthRole from './pages/OauthRole';\nimport OauthFail from './pages/OauthFail';\nimport { setCurProfile } from './actions/areaFilterActions';\n\nfunction App() {\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n  const location = useLocation();\n\n  const hideFooterRoutes = ['/map', '/login', '/signup', '/find-password', '*'];\n  const shouldHideFooter = hideFooterRoutes.includes(location.pathname);\n\n  return (\n    <div className=\"h-[calc(100vh-80px)]\">\n      {isMobile ? <MHeader /> : <PcHeader />}\n\n      <Routes>\n        <Route path=\"/\" element={<Main />} />\n        <Route path=\"/login\" element={<Login />} />\n\n        <Route path=\"/map\" element={<Map />} />\n\n        <Route path=\"/signup\" element={<SignUp />} />\n        <Route path=\"/find-password\" element={<FindPw />} />\n        <Route path=\"/kindergarten/:id\" element={<KinderDetail />} />\n        <Route path=\"/community/:id\" element={<Community />} />\n        <Route path=\"/community/:id/write\" element={<Write />} />\n        <Route path=\"/mypage/:id\" element={<Mypage />} />\n        <Route path=\"*\" element={<NotFound />} />\n        <Route path=\"/community/:id/write/:postId\" element={<Write />} />\n        <Route path=\"/community/:id/post/:postId\" element={<Post />} />\n        <Route path=\"/oauthlogin\" element={<OauthLogin />} />\n        <Route path=\"/oauthrole\" element={<OauthRole />} />\n        <Route path=\"/oauthfail\" element={<OauthFail />} />\n      </Routes>\n      {shouldHideFooter ? null : <Footer />}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jieun/Desktop/main-project/idle/src/reportWebVitals.js",[],[],["297","298","299","300","301"],"/Users/jieun/Desktop/main-project/idle/src/store/configureStore.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/pages/Map.jsx",["302"],["303"],"import {\n  GoogleMap,\n  useJsApiLoader,\n  MarkerF,\n  InfoWindowF,\n} from '@react-google-maps/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useState, useCallback, memo, useEffect } from 'react';\nimport { setCenter } from '../actions/areaFilterActions';\nimport PinOn from '../images/pin-on.png';\nimport MapCard from '../components/Card/MapCard';\nimport Button from '../components/Button/Button';\n\nconst containerStyle = {\n  width: '100%',\n  height: '100vh',\n};\n\nconst myStyles = [\n  {\n    featureType: 'poi',\n    elementType: 'labels',\n    stylers: [{ visibility: 'off' }],\n  },\n];\n\nfunction Map() {\n  const areaFilter = useSelector(state => state.areaFilter);\n  const center = useSelector(state => state.center);\n  const kinderGartens = useSelector(state => state.kinderGartens);\n  const searchValue = useSelector(state => state.searchValue);\n  const centerArr = [\n    { lat: 37.568177, lng: 126.992217 },\n    {\n      lat: 37.523474,\n      lng: 126.844036,\n    },\n    {\n      lat: 37.495092,\n      lng: 126.931558,\n    },\n    {\n      lat: 37.515894,\n      lng: 127.070571,\n    },\n    {\n      lat: 37.589416,\n      lng: 126.92703,\n    },\n    {\n      lat: 37.648563,\n      lng: 127.03758,\n    },\n    {\n      lat: 37.533099,\n      lng: 126.979087,\n    },\n    {\n      lat: 37.583792,\n      lng: 127.081658,\n    },\n  ];\n\n  const [map, setMap] = useState(null);\n  const dispatch = useDispatch();\n\n  const { isLoaded } = useJsApiLoader(\n    {\n      id: 'google-map-script',\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n    },\n    [center],\n  );\n\n  const getCenterValue = areaFilter => {\n    dispatch(setCenter(centerArr[areaFilter]));\n    if (searchValue) {\n      dispatch(setCenter(centerArr[0]));\n    }\n  };\n\n  useEffect(() => {\n    getCenterValue(areaFilter);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [areaFilter]);\n\n  const onLoad = useCallback(\n    function callback(mapValue) {\n      const centerLatLng = new window.google.maps.LatLng(\n        center.lat,\n        center.lng,\n      );\n      const bounds = new window.google.maps.LatLngBounds(centerLatLng);\n      const circle = new window.google.maps.Circle({\n        center: centerLatLng,\n        radius: areaFilter === 0 ? 10000 : 5000, // 500m 반경\n      });\n      bounds.union(circle.getBounds());\n      mapValue.fitBounds(bounds);\n    },\n    [center, areaFilter],\n  );\n\n  const onUnmount = useCallback(function callback() {\n    setMap(null);\n  }, []);\n\n  const [clickedMarker, setClickedMarker] = useState(null);\n\n  const handleMarkerClick = markerValue => {\n    setClickedMarker(markerValue);\n  };\n\n  return isLoaded ? (\n    <div className=\"w-[100vw]\">\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={12}\n        onLoad={onLoad}\n        onUnmount={onUnmount}\n        options={{ disableDefaultUI: true, styles: myStyles }}\n      >\n        {kinderGartens &&\n          kinderGartens.map(kinderGarten => {\n            return (\n              <MarkerF\n                key={kinderGarten.kindergartenId}\n                position={{\n                  lat: kinderGarten.latitude,\n                  lng: kinderGarten.longitude,\n                }}\n                onClick={() => handleMarkerClick(kinderGarten)}\n                icon={{\n                  url: PinOn,\n                  scaledSize: new window.google.maps.Size(56, 56),\n                }}\n              >\n                {clickedMarker &&\n                  clickedMarker.kindergartenId ===\n                    kinderGarten.kindergartenId && (\n                    <InfoWindowF\n                      position={{\n                        lat: clickedMarker.lat,\n                        lng: clickedMarker.lng,\n                      }}\n                      onCloseClick={() => setClickedMarker(null)}\n                    >\n                      <div\n                        className=\"flex-center onlyMobile:h-220 onlyMobile:w-226 onlyMini:w-160\"\n                        style={{ backgroundColor: 'white' }}\n                      >\n                        <MapCard\n                          name={kinderGarten.name}\n                          ratedReviewsAvg={kinderGarten.ratedReviewsAvg}\n                          ratedReviewsCount={kinderGarten.ratedReviewsCount}\n                          id={kinderGarten.kindergartenId}\n                          imageUrl={kinderGarten.imageUrl}\n                        />\n                      </div>\n                    </InfoWindowF>\n                  )}\n              </MarkerF>\n            );\n          })}\n        <div className=\"flex-center fixed bottom-10 left-0 z-10 w-[100vw]\">\n          <Link to=\"/\">\n            <Button\n              className=\"color-black z-10 flex h-50 w-190 items-center justify-around\"\n              icon=\"list\"\n            >\n              리스트보기\n            </Button>\n          </Link>\n        </div>\n      </GoogleMap>\n    </div>\n  ) : (\n    <> </>\n  );\n}\n\nexport default memo(Map);\n","/Users/jieun/Desktop/main-project/idle/src/pages/Post.jsx",["304","305","306","307","308","309","310","311","312"],["313"],"import { useEffect, useState, useCallback } from 'react';\nimport { useNavigate, Link, useParams, useNavigation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\nimport Parser from 'html-react-parser';\nimport { setAuth } from '../actions/areaFilterActions';\nimport { ReactComponent as View } from '../images/view.svg';\nimport LikeOff from '../images/perpett-off.png';\nimport LikeOn from '../images/community-like-on.png';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport dateCalculate from '../components/dateCalculate';\nimport Comment from '../components/Comment';\nimport profile from '../images/profile.png';\n\nfunction Post() {\n  const [post, setPost] = useState([]);\n  const [isPending, setIsPending] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [commentInput, setCommentInput] = useState('');\n  const [like, setLike] = useState(false);\n  const [countLike, setCountLike] = useState(0);\n  const [images, setImages] = useState([]);\n  const [writerInfo, setWriterInfo] = useState([]);\n  const [commentError, setCommentError] = useState('');\n  const [kinderName, setKinderName] = useState([]);\n  const navigate = useNavigate();\n  const { postId } = useParams();\n  const { id } = useParams();\n  const auth = useSelector(state => state.auth);\n  const curProfile = useSelector(state => state.curProfile);\n\n  const dispatch = useDispatch();\n  const navi = useNavigate();\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/post/${postId}/comment`)\n      .then(response => {\n        setIsPending(true);\n        // setPost(response.data[0]);\n        setComments(response.data.data);\n      })\n      .catch(error => {\n        Swal.fire({\n          icon: 'error',\n          text: `error! ${error}`,\n          confirmButtonColor: '#FFD337',\n        });\n        setIsPending(false);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function changeInput(e) {\n    setCommentInput(e.target.value);\n    if (e.target.value.length !== 0) {\n      setCommentError('');\n    } else {\n      setCommentError('댓글 내용을 입력해주세요.');\n    }\n  }\n\n  function postComment() {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '로그인을 먼저 해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      }).then(res => {\n        navi('/login');\n      });\n    }\n    if (commentInput.length !== 0) {\n      const data = {\n        postId,\n        content: commentInput,\n      };\n\n      axios\n        .post(\n          `${process.env.REACT_APP_API_URL}/api/post/${postId}/comment`,\n          data,\n          {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          },\n        )\n        .then(response => {\n          window.location.reload();\n        })\n        .catch(error => {\n          if (error.response && error.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n          }\n        });\n    } else {\n      setCommentError('댓글 내용을 입력해주세요.');\n    }\n  }\n\n  // 유치원 정보\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/community/${id}`)\n      .then(response => {\n        setKinderName(response.data.data);\n      });\n  }, [id]);\n\n  // 게시글 정보\n  useEffect(() => {\n    window.scroll(0, 0);\n    const headers = {\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n    axios\n      .get(\n        `${process.env.REACT_APP_API_URL}/api/community/${id}/post/${postId}`,\n        localStorage.getItem('token') && headers,\n      )\n      .then(response => {\n        setWriterInfo(response.data.data);\n        setPost(response.data.data);\n        setCountLike(response.data.data.likeCount);\n        setLike(response.data.data.like);\n        setImages(response.data.data.images);\n      })\n      .catch(error => {\n        if (error.response && error.response.status === 401) {\n          Swal.fire({\n            icon: 'error',\n            text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n            confirmButtonColor: '#FFD337',\n          });\n          dispatch(setAuth(false));\n          localStorage.removeItem('token');\n        } else {\n          Swal.fire({\n            icon: 'error',\n            text: `error! ${error}`,\n            confirmButtonColor: '#FFD337',\n          });\n        }\n      });\n  }, [setPost, postId, id, auth, dispatch]);\n\n  // 글삭제\n  const handleDelete = useCallback(() => {\n    Swal.fire({\n      text: '게시글을 삭제하시겠습니까?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#FFD337',\n      cancelButtonColor: '#ffffff',\n      confirmButtonText: '네',\n      cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (!auth) {\n          Swal.fire({\n            icon: 'error',\n            text: '비회원은 글삭제가 불가능합니다❗️',\n            confirmButtonColor: '#FFD337',\n          });\n          return;\n        }\n\n        axios\n          .delete(\n            `${process.env.REACT_APP_API_URL}/api/community/${id}/post/${postId}`,\n            {\n              headers: { Authorization: localStorage.getItem('token') },\n            },\n          )\n          .then(response => {\n            Swal.fire({\n              text: '게시글이 삭제되었습니다.',\n              confirmButtonColor: '#FFD337',\n            }).then(result => {\n              navigate(`/community/${id}`);\n            });\n          })\n          .catch(error => {\n            // 에러 처리\n            console.log(error);\n            if (error.response && error.response.status === 403) {\n              Swal.fire({\n                icon: 'error',\n                text: '본인이 작성한 게시글만 삭제할 수 있어요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n            } else if (error.response && error.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            } else {\n              Swal.fire({\n                icon: 'error',\n                text: `error! ${error}`,\n                confirmButtonColor: '#FFD337',\n              });\n            }\n          });\n      }\n    });\n  }, [id, postId, dispatch, auth, navigate]);\n\n  // 글수정\n  const handleEdit = useCallback(() => {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '비회원은 글수정이 불가능합니다❗️',\n        confirmButtonColor: '#FFD337',\n      });\n      return;\n    }\n    if (\n      writerInfo.email === curProfile.email &&\n      writerInfo.name === curProfile.name\n    ) {\n      navigate(`/community/${id}/write/${postId}`);\n    } else {\n      Swal.fire({\n        icon: 'error',\n        text: '본인이 작성한 게시글만 수정할 수 있어요❗️',\n        confirmButtonColor: '#FFD337',\n      });\n    }\n  }, [writerInfo, curProfile, navigate, postId, id, auth]);\n\n  // 좋아요\n  const isLike = () => {\n    if (!localStorage.getItem('token')) {\n      Swal.fire({\n        icon: 'error',\n        text: '비회원은 좋아요가 불가능합니다❗️',\n        confirmButtonColor: '#FFD337',\n      });\n      return;\n    }\n    const updatedLike = !like;\n    const updatedLikes = updatedLike ? countLike + 1 : countLike - 1;\n\n    setLike(updatedLike);\n    setCountLike(updatedLikes);\n\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/post/${postId}/like`, {\n        headers: {\n          Authorization: localStorage.getItem('token'),\n        },\n      })\n      .then(response => {})\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"mb-64 flex flex-col items-center pt-130 onlyMobile:pt-92\">\n      <div className=\"w-full max-w-[1280px] px-80 onlyMobile:px-20\">\n        <div className=\"border-b border-solid border-black-070 pb-32\">\n          <div className=\"text-14 text-black-350 onlyMobile:text-12\">\n            <Link to={`/kindergarten/${id}`} className=\"hover:underline\">\n              {kinderName.name && kinderName.name.replace(/\"/g, '')}\n            </Link>\n            <span> - </span>\n            <Link to={`/community/${id}`} className=\"hover:underline\">\n              커뮤니티\n            </Link>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-full\">\n              <p className=\"text-28 font-bold onlyMobile:text-22\">\n                {post.title}\n              </p>\n              <div className=\"mt-12 flex w-full items-end justify-between\">\n                <div className=\"flex flex-col\">\n                  <div className=\"mb-12 flex items-center\">\n                    <div className=\"user-profile h-24 w-24\">\n                      {post.profileImageUrl ? (\n                        <img src={post.profileImageUrl} alt=\"img\" />\n                      ) : (\n                        <img src={profile} alt=\"defaultImage\" />\n                      )}\n                    </div>\n                    <p className=\"relative pl-5 pr-12 text-14 text-black-900 onlyMobile:text-12\">\n                      {post.name}\n                    </p>\n                  </div>\n                  <div className=\"flex\">\n                    <p className=\"list-gray-small flex items-center\">\n                      <View width=\"16\" height=\"16\" className=\"mr-5\" />\n                      조회 {post.views}\n                    </p>\n                    <p className=\"list-gray-small flex items-center pl-12\">\n                      <img\n                        src={LikeOff}\n                        alt=\"좋아요\"\n                        className=\"mr-5 h-18 w-18\"\n                      />\n                      좋아요 {countLike}\n                    </p>\n                  </div>\n                </div>\n                <p className=\"text-14 text-black-350 onlyMobile:text-12 \">\n                  {post.modifiedAt && dateCalculate(post.modifiedAt)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"border-b border-solid border-black-070 pb-24\">\n          {Parser(\n            `<div className=\"py-32 onlyMobile:py-24 onlyMobile:text-14 break-words\">\n              ${post.content ? post.content : ''}\n            </div>`,\n          )}\n          {images &&\n            images.map(el => {\n              return Parser(`<img src=\"${el.imageUrl}\" alt=\"게시물 이미지\" />`);\n            })}\n          <div className=\"mb-40\">\n            <button\n              className=\"mr-15 text-14 text-black-350 onlyMobile:text-12\"\n              type=\"button\"\n              onClick={handleEdit}\n            >\n              수정\n            </button>\n            <button\n              className=\"text-14 text-black-350 onlyMobile:text-12\"\n              type=\"button\"\n              onClick={handleDelete}\n            >\n              삭제\n            </button>\n          </div>\n          <div className=\"flex justify-between\">\n            <div className=\"flex items-center text-16 onlyMobile:text-14\">\n              <button\n                type=\"button\"\n                onClick={isLike}\n                className={\n                  like\n                    ? 'flex-center flex h-40 w-40 rounded-[16px] bg-yellow-500 onlyMini:h-30 onlyMini:w-30 onlyMini:rounded-[12px]'\n                    : 'flex-center flex h-40 w-40 rounded-[16px] border-[1px] border-black-070 onlyMini:h-30 onlyMini:w-30 onlyMini:rounded-[12px]'\n                }\n              >\n                <img\n                  src={like ? LikeOn : LikeOff}\n                  alt=\"좋아요\"\n                  className=\"h-24 w-24 onlyMini:h-20 onlyMini:w-20\"\n                />\n              </button>\n              <span className=\"pl-10\">좋아요</span>\n            </div>\n            <div className=\"flex\">\n              <Link\n                to={`/community/${id}`}\n                className=\"flex-center btn-size-m border-gray mr-10 flex rounded-md\"\n              >\n                목록보기\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div className=\"py-30\">\n          <p className=\"mb-30 text-16 font-bold onlyMobile:text-14\">\n            댓글\n            <span className=\"pl-2\">{isPending ? comments.length : null}</span>\n          </p>\n          <div className=\"w-full rounded-[12px] bg-black-025 px-32 pt-32\">\n            {comments && comments.length !== 0 ? (\n              comments.map(comment => {\n                return (\n                  <Comment\n                    key={comment.commentId}\n                    commentId={comment.commentId}\n                    name={comment.name}\n                    email={comment.email}\n                    text={comment.content}\n                    postId={postId}\n                    modifiedAt={comment.modifiedAt}\n                    modified={comment.modified}\n                    profileImg={comment.imageUrl}\n                  />\n                );\n              })\n            ) : (\n              <div className=\"pb-32\">댓글이 없어요🥺</div>\n            )}\n          </div>\n          <div className=\"mt-20 flex w-full\">\n            <Input\n              placeholder=\"댓글을 입력해주세요.\"\n              className=\"!margin-0 w-full\"\n              onChange={e => changeInput(e)}\n              isError={commentError}\n            />\n            <Button\n              className=\"btn-size-l color-yellow ml-8 shrink-0\"\n              onClick={() => postComment()}\n            >\n              댓글 등록\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","/Users/jieun/Desktop/main-project/idle/src/pages/Login.jsx",["314","315","316","317"],[],"import { useMediaQuery } from 'react-responsive';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setAuth,\n  setCurProfile,\n  setActiveIndex,\n} from '../actions/areaFilterActions';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport { ReactComponent as Kakao } from '../images/logo-kakao.svg';\nimport { ReactComponent as Google } from '../images/logo-google.svg';\n\nfunction Login() {\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  const [loginData, setLoginData] = useState({\n    email: '',\n    password: '',\n  });\n\n  // 오류메시지\n  const [emailErr, setEmailErr] = useState('');\n  const [pwdErr, setPwdErr] = useState('');\n\n  // 유효성 검사\n  const [check, setCheck] = useState(true);\n\n  const handleValueChange = key => e => {\n    setLoginData({ ...loginData, [key]: e.target.value });\n  };\n\n  const getUsers = () => {\n    if (localStorage.getItem('token')) {\n      axios\n        .get(\n          `${process.env.REACT_APP_API_URL}/api/users/profile/currentProfile`,\n          {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          },\n        )\n        .then(res => {\n          dispatch(setCurProfile(res.data.data));\n          dispatch(setActiveIndex(res.data.data.profileId));\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  };\n\n  function loginFunc() {\n    if (!loginData.email) {\n      setEmailErr('이메일을 입력하세요.');\n      setPwdErr('');\n      setCheck(false);\n      return;\n    }\n    if (!loginData.password) {\n      setEmailErr('');\n      setPwdErr('비밀번호를 입력하세요.');\n      setCheck(false);\n      return;\n    }\n\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/api/login`, {\n        email: loginData.email,\n        password: loginData.password,\n      })\n      .then(res => {\n        dispatch(setAuth(true));\n        setEmailErr('');\n        setPwdErr('');\n        navi('/');\n        localStorage.setItem('token', res.headers.get('Authorization'));\n        localStorage.setItem('tokenRefresh', res.headers.get('Refresh'));\n      })\n      .then(res => {\n        getUsers();\n      })\n      .catch(err => {\n        dispatch(setAuth(false));\n        setCheck(false);\n        if (err.response && err.response.status === 500) {\n          setEmailErr('이미 탈퇴한 이메일입니다.');\n        } else {\n          setEmailErr('이메일 또는 패스워드를 다시 확인해주세요.');\n        }\n      });\n  }\n\n  const googleLogin = async e => {\n    e.preventDefault();\n    const googleAuthUrl = `${process.env.REACT_APP_API_URL}/oauth2/authorization/google?redirect_uri=${process.env.REACT_APP_API_URL}/login/oauth2/code/google`;\n\n    window.location.href = googleAuthUrl;\n  };\n\n  const kakaoLogin = async e => {\n    e.preventDefault();\n    const kakaoAuthUrl = `${process.env.REACT_APP_API_URL}/oauth2/authorization/kakao?redirect_uri=${process.env.REACT_APP_API_URL}/login/oauth2/code/kakao`;\n    window.location.href = kakaoAuthUrl;\n  };\n\n  const login = () => {\n    return (\n      <>\n        <form onSubmit={e => e.preventDefault()}>\n          {check ? (\n            <div className=\"mb-24\">\n              <Input\n                labelText=\"이메일\"\n                placeholder=\"이메일을 입력해주세요.\"\n                type=\"text\"\n                onChange={handleValueChange('email')}\n              />\n            </div>\n          ) : (\n            <div className=\"mb-24\">\n              <Input\n                labelText=\"이메일\"\n                placeholder=\"이메일 입력해주세요.\"\n                type=\"text\"\n                isError={emailErr}\n                onChange={handleValueChange('email')}\n              />\n            </div>\n          )}\n\n          {check ? (\n            <Input\n              labelText=\"비밀번호\"\n              placeholder=\"비밀번호를 입력해주세요.\"\n              type=\"password\"\n              onChange={handleValueChange('password')}\n            />\n          ) : (\n            <Input\n              labelText=\"비밀번호\"\n              placeholder=\"비밀번호를 입력해주세요.\"\n              type=\"password\"\n              isError={pwdErr}\n              onChange={handleValueChange('password')}\n            />\n          )}\n          <Link to=\"/find-password\">\n            <p className=\"mb-24 mt-8 text-right text-14 text-black-200\">\n              비밀번호를 잊으셨나요?\n            </p>\n          </Link>\n          <Button\n            className=\"color-yellow btn-size-l w-full\"\n            onClick={() => {\n              loginFunc();\n            }}\n          >\n            로그인\n          </Button>\n        </form>\n        <div className=\"login-line\">또는</div>\n        <div>\n          <Button\n            className=\"border-gray btn-size-l mb-16 w-full gap-1.5\"\n            onClick={kakaoLogin}\n          >\n            <Kakao />\n            카카오 로그인\n          </Button>\n          <Button\n            className=\"border-gray btn-size-l w-full gap-1.5\"\n            onClick={googleLogin}\n          >\n            <Google />\n            구글 로그인\n          </Button>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"flex-center onlyMobile:login-m-align h-screen bg-black-025 onlyMobile:bg-white\">\n      <div className=\"mt-80 onlyMobile:w-full onlyMobile:px-24\">\n        {!isMobile && <div className=\"login-card\">{login()}</div>}\n        {isMobile && <div>{login()}</div>}\n        <div className=\"flex-center mt-32\">\n          <p className=\"mr-24 text-14 text-black-200 onlyMobile:text-12\">\n            아직 퍼펫트 회원이 아니신가요?\n          </p>\n          <Link to=\"/signup\">\n            <p className=\"text-14 text-black-900 onlyMobile:text-12\">\n              회원가입 바로가기\n            </p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/jieun/Desktop/main-project/idle/src/components/Footer.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/pages/Main.jsx",["318","319","320","321"],[],"import { useMediaQuery } from 'react-responsive';\nimport { useState, useEffect, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { PulseLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { setKinderGartens } from '../actions/areaFilterActions';\nimport MainCard from '../components/Card/MainCard';\nimport Button from '../components/Button/Button';\nimport InputSelectBox from '../components/Input/InputSelectBox';\nimport { ReactComponent as Top } from '../images/top.svg';\nimport NoList from '../images/perpett-nolist.png';\nimport PerpettBanner from '../images/banner.png';\nimport PerpettBannerMobile from '../images/m-banner.png';\n\nfunction Main() {\n  const [isPending, setIsPending] = useState(false);\n\n  const [ref, inView] = useInView();\n\n  const page = useRef(8);\n  const [print, setPrint] = useState([]);\n  const dispatch = useDispatch();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  const areaFilter = useSelector(state => state.areaFilter);\n  const kinderGartens = useSelector(state => state.kinderGartens);\n  const searchValue = useSelector(state => state.searchValue);\n  const user = useSelector(state => state.user);\n  const curUser = useSelector(state => state.curUser);\n  const curProfile = useSelector(state => state.curProfile);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    let url = ``;\n    if (searchValue) {\n      url = `${process.env.REACT_APP_API_URL}/api/kindergarten/name/${searchValue}`;\n    } else {\n      url = `${process.env.REACT_APP_API_URL}/api/kindergarten/loc/${areaFilter}`;\n    }\n    axios\n      .get(url)\n      .then(response => {\n        dispatch(setKinderGartens(response.data));\n        setIsPending(true);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [areaFilter, searchValue, dispatch]);\n\n  useEffect(() => {\n    let timerId;\n    if (isPending) {\n      if (kinderGartens.length === 0) {\n        setPrint([]);\n      } else {\n        setPrint(kinderGartens.slice(0, page.current));\n      }\n      if (inView) {\n        timerId = setTimeout(() => {\n          page.current += 8;\n          setPrint(kinderGartens.slice(0, page.current));\n        }, 150);\n      }\n    }\n\n    return () => clearTimeout(timerId);\n  }, [inView, isPending, kinderGartens]);\n\n  const toTop = () => {\n    window.scrollTo(0, 0);\n  };\n\n  return (\n    <div className=\"flex-center relative flex-col\">\n      <div className=\"flex-center mt-80 w-[100%] max-w-[1440px] flex-col px-80 onlyMobile:mt-64 onlyMobile:px-0\">\n        {!isMobile ? (\n          <div\n            className=\"flex-center mb-24 mt-56 h-432 w-[100%] max-w-[1440px] overflow-hidden rounded-[16px] bg-cover bg-center\"\n            style={{ backgroundImage: `url(${PerpettBanner})` }}\n          />\n        ) : (\n          <div\n            className=\"flex-center h-300 w-[100%] overflow-hidden bg-cover bg-center\"\n            style={{ backgroundImage: `url(${PerpettBannerMobile})` }}\n          />\n        )}\n      </div>\n\n      <div className=\"flex-center w-[100%] max-w-[1440px] flex-col px-80 onlyMobile:px-24\">\n        <div className=\"mb-24 mt-48 flex w-[100%] justify-between text-28 font-bold onlyMobile:flex-col onlyMobile:text-22\">\n          <span>\n            {searchValue ? `\"${searchValue}\"에 대한 검색결과` : '유치원 리스트'}\n          </span>\n          <InputSelectBox\n            options=\"전체보기, 강서 · 구로 · 양천, 관악 · 금천 · 동작 · 영등포, 강남 · 강동 · 서초 · 송파, 마포 · 은평 · 서대문, 강북 · 노원 · 도봉 · 성북, 용산 · 성동 · 종로 · 중구, 광진 · 동대문 · 중랑\"\n            width=\"min-w-260 onlyMobile:w-full onlyMobile:mt-10\"\n            placeholder=\"전체보기\"\n          />\n        </div>\n        <div className=\"grid w-[100%] grid-cols-cardGrid gap-x-[20px]\">\n          {isPending ? (\n            print.length === 0 ? (\n              <div className=\"flex-center h-640 flex-col\">\n                <img src={NoList} alt=\"NoList\" className=\"mb-16 h-160 w-160\" />\n                <span className=\"text-18 text-black-350\">\n                  {searchValue\n                    ? `\"${searchValue}\"에 대한 검색결과가 없어요...`\n                    : '여기는 유치원이 없어요...'}\n                </span>\n              </div>\n            ) : (\n              print.map(kinderGarten => {\n                return (\n                  <MainCard\n                    key={kinderGarten.kindergartenId}\n                    name={kinderGarten.name}\n                    ratedReviewsAvg={kinderGarten.ratedReviewsAvg}\n                    ratedReviewsCount={kinderGarten.ratedReviewsCount}\n                    locations={kinderGarten.locations}\n                    id={kinderGarten.kindergartenId}\n                    imageUrl={kinderGarten.imageUrl}\n                  />\n                );\n              })\n            )\n          ) : (\n            <div className=\"flex-center h-[50vh] w-[100%]\">\n              <PulseLoader color=\"#FFD337\" />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-center sticky bottom-10 left-0 w-[100%] text-white\">\n          <Link to=\"/map\">\n            <Button\n              className=\"color-black flex-center z-20 h-50 w-190 onlyMini:w-140\"\n              icon=\"map\"\n            >\n              지도보기\n            </Button>\n          </Link>\n        </div>\n        <div className=\"flex-center sticky bottom-10 left-0 w-[100%] text-white\">\n          <Button\n            className=\"flex-center absolute bottom-0 right-0 z-20 h-50 w-50 rounded-[50%] bg-yellow-500 hover:bg-yellow-600\"\n            icon=\"toTop\"\n            onClick={() => toTop()}\n          >\n            <Top />\n          </Button>\n        </div>\n      </div>\n      {isPending && page.current < kinderGartens.length ? (\n        <div ref={ref} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/jieun/Desktop/main-project/idle/src/components/Header/MHeader.jsx",["322","323","324"],[],"import { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useSelector, dispatch, useDispatch } from 'react-redux';\nimport {\n  setAuth,\n  setKinderGartens,\n  setInputValue,\n  setAreaFilter,\n  setSearchValue,\n} from '../../actions/areaFilterActions';\nimport InputBtn from '../InputBtn';\nimport { ReactComponent as Menu } from '../../images/menu.svg';\nimport { ReactComponent as LogoSymbol } from '../../images/logo-symbol.svg';\nimport { ReactComponent as Close } from '../../images/close.svg';\nimport DropDownMenu from '../DropDownMenu';\n\nfunction MHeader() {\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n\n  const [dropDown, setDropDown] = useState(false);\n  const curProfile = useSelector(state => state.curProfile);\n  const auth = useSelector(state => state.auth);\n\n  function onDropDown() {\n    setDropDown(!dropDown);\n  }\n\n  function closeDropDown() {\n    setDropDown(false);\n  }\n\n  function reload() {\n    navi('/');\n    window.location.reload();\n    dispatch(setAreaFilter(0));\n    dispatch(setInputValue(''));\n    dispatch(setSearchValue(''));\n  }\n\n  return (\n    <div\n      className={`${\n        dropDown ? '' : 'shadow-headerShadow'\n      } fixed z-10 flex h-64 w-[100%] items-center justify-between border-b border-black-050 bg-white px-24 py-8`}\n    >\n      <Link to=\"/\">\n        <div\n          className=\"flex-center w-48 cursor-pointer\"\n          onClick={reload}\n          role=\"presentation\"\n        >\n          <LogoSymbol />\n        </div>\n      </Link>\n      <div className=\"input-array\">\n        <InputBtn />\n      </div>\n      {dropDown ? (\n        <button\n          className=\"h-32 w-32\"\n          type=\"button\"\n          onClick={() => onDropDown()}\n        >\n          <Close />\n        </button>\n      ) : (\n        <Menu className=\"h-32 w-32\" onClick={() => onDropDown()} />\n      )}\n      {dropDown ? (\n        auth ? (\n          <DropDownMenu setAuth={setAuth} setDropDown={setDropDown} />\n        ) : (\n          <div className=\"absolute right-0 top-[64px] flex w-full flex-col items-start justify-center rounded-[10px] border-b border-black-050 bg-white px-24 py-8 shadow-headerShadow\">\n            <ul className=\"w-full px-8 text-left\">\n              <Link to=\"/\">\n                <li\n                  className=\"flex h-58 cursor-pointer items-center py-12 text-14\"\n                  onClick={() => closeDropDown()}\n                  role=\"presentation\"\n                >\n                  리스트보기\n                </li>\n              </Link>\n              <div className=\"h-1 w-full border-b\" />\n              <Link to=\"/login\">\n                <li\n                  className=\"flex h-58 cursor-pointer items-center py-12 text-14\"\n                  onClick={() => closeDropDown()}\n                  role=\"presentation\"\n                >\n                  로그인\n                </li>\n              </Link>\n              <Link to=\"/signup\">\n                <li\n                  className=\"flex h-58 cursor-pointer items-center py-12 text-14\"\n                  onClick={() => closeDropDown()}\n                  role=\"presentation\"\n                >\n                  회원가입\n                </li>\n              </Link>\n            </ul>\n          </div>\n        )\n      ) : null}\n    </div>\n  );\n}\n\nexport default MHeader;\n","/Users/jieun/Desktop/main-project/idle/src/components/Header/PcHeader.jsx",["325","326","327"],[],"import { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  // setUser,\n  // setCurUser,\n  setAuth,\n  // setKinderGartens,\n  setAreaFilter,\n  setInputValue,\n  setSearchValue,\n} from '../../actions/areaFilterActions';\nimport InputBtn from '../InputBtn';\nimport Button from '../Button/Button';\nimport DropDownMenu from '../DropDownMenu';\nimport { ReactComponent as ArrowOpen } from '../../images/arrow-open.svg';\nimport { ReactComponent as ArrowClose } from '../../images/arrow-close.svg';\nimport { ReactComponent as Logo } from '../../images/logo-txt.svg';\n\nfunction Header() {\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n\n  const [dropDown, setDropDown] = useState(false);\n\n  const curProfile = useSelector(state => state.curProfile);\n  const auth = useSelector(state => state.auth);\n\n  function onDropDown() {\n    setDropDown(!dropDown);\n  }\n\n  function reload() {\n    navi('/');\n    window.location.reload();\n    dispatch(setAreaFilter(0));\n    dispatch(setInputValue(''));\n    dispatch(setSearchValue(''));\n  }\n\n  return (\n    <div className=\"flex-center fixed z-20 w-full bg-white shadow-headerShadow\">\n      <div className=\"flex h-80 w-[100%] max-w-[1440px] items-center justify-between border-b border-black-050 px-[4.5%] py-16\">\n        <div\n          className=\"flex-center w-120 cursor-pointer\"\n          onClick={reload}\n          role=\"presentation\"\n        >\n          <Logo />\n        </div>\n        <div className=\"input-array\">\n          <InputBtn />\n        </div>\n        {auth ? (\n          <div className=\"relative mr-12 flex h-48 w-150 items-center justify-between p-8\">\n            <div className=\"user-profile h-32 w-32\">\n              <img\n                src={curProfile.imageUrl}\n                className=\"min-h-32 min-w-32 rounded-md border\"\n                alt=\"profileImg\"\n              />\n            </div>\n            <span className=\"text-max mx-12 min-w-88 text-center text-14\">\n              {curProfile.name}\n            </span>\n            {dropDown ? (\n              <ArrowClose\n                className=\"h-6 min-w-10 cursor-pointer\"\n                onClick={() => onDropDown()}\n              />\n            ) : (\n              <ArrowOpen\n                className=\"h-6 min-w-10 cursor-pointer\"\n                onClick={() => onDropDown()}\n              />\n            )}\n            {dropDown ? (\n              <DropDownMenu setAuth={setAuth} setDropDown={setDropDown} />\n            ) : null}\n          </div>\n        ) : (\n          <div className=\"flex shrink-0 items-center justify-between\">\n            <Link to=\"/login\">\n              <Button className=\"color-yellow btn-size-m mr-12\">로그인</Button>\n            </Link>\n            <Link to=\"/signup\">\n              <Button className=\"border-gray btn-size-m\">회원가입</Button>\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/jieun/Desktop/main-project/idle/src/pages/KinderDetail.jsx",["328","329","330","331","332"],[],"import axios from 'axios';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport { useMediaQuery } from 'react-responsive';\nimport { GoogleMap, useJsApiLoader, MarkerF } from '@react-google-maps/api';\nimport {\n  setCenter,\n  setCategory,\n  setCommInputValue,\n  setTempCommInputValue,\n} from '../actions/areaFilterActions';\nimport Modal from './Modal';\nimport ConfirmReview from '../components/List/ConfirmReview';\nimport ListNotice from '../components/List/ListNotice';\nimport ListReview from '../components/List/ListReview';\nimport Button from '../components/Button/Button';\nimport Pagination from '../components/Pagination';\nimport PinOn from '../images/pin-on.png';\nimport { ReactComponent as Call } from '../images/call.svg';\nimport { ReactComponent as Pin } from '../images/pin.svg';\nimport { ReactComponent as Sns } from '../images/social.svg';\nimport { ReactComponent as Time } from '../images/time.svg';\nimport { ReactComponent as StarOn } from '../images/star-on.svg';\nimport { ReactComponent as Perpett } from '../images/perpett-on.svg';\nimport SettingModal from './SettingModal';\n\n// 지도 관련 스타일 정의\nconst myStyles = [\n  {\n    featureType: 'poi',\n    elementType: 'labels',\n    stylers: [{ visibility: 'off' }],\n  },\n];\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n  borderRadius: '16px',\n};\n\nfunction KinderDetail() {\n  const { id } = useParams();\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  // 유치원 정보\n  const [kinderData, setKinderData] = useState('');\n  const [postData, setPostData] = useState('');\n\n  const [reviewData, setReviewData] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentReview, setCurrentReview] = useState([]);\n\n  const [map, setMap] = useState(null);\n  const [isModal, setisModal] = useState(false);\n  const center = useSelector(state => state.center);\n  const auth = useSelector(state => state.auth);\n\n  // 지도\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n  });\n\n  const onLoad = useCallback(\n    function callback(mapValue) {\n      const centerLatLng = new window.google.maps.LatLng(\n        center.lat,\n        center.lng,\n      );\n      const bounds = new window.google.maps.LatLngBounds(centerLatLng);\n      const circle = new window.google.maps.Circle({\n        center: centerLatLng,\n        radius: 100, // 10m 반경\n      });\n      bounds.union(circle.getBounds());\n      mapValue.fitBounds(bounds);\n    },\n    [center.lat, center.lng],\n  );\n\n  const onUnmount = useCallback(function callback() {\n    setMap(null);\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    axios\n      .all([\n        axios.get(`${process.env.REACT_APP_API_URL}/api/kindergarten/${id}`),\n        axios.get(\n          `${process.env.REACT_APP_API_URL}/api/community/${id}/post/notification`,\n        ),\n        axios.get(\n          `${process.env.REACT_APP_API_URL}/api/review/kindergarten/${id}`,\n        ),\n      ])\n      .then(\n        axios.spread((res1, res2, res3) => {\n          const resKinder = res1.data.data;\n          const resPost = res2.data.data;\n          const resReview = res3.data;\n          setKinderData(resKinder);\n          setPostData(resPost);\n          setReviewData(resReview.sort((a, b) => b.reviewId - a.reviewId));\n          setCurrentReview(resReview.slice(0, 5));\n\n          if (res1.data) {\n            dispatch(\n              setCenter({\n                lat: res1.data.data.latitude,\n                lng: res1.data.data.longitude,\n              }),\n            );\n          }\n        }),\n      )\n      .catch(err => {\n        console.log(err);\n      });\n  }, [id, dispatch]);\n\n  // 페이지네이션\n  useEffect(() => {\n    const firstReview = (currentPage - 1) * 5;\n    setCurrentReview(reviewData.slice(firstReview, firstReview + 5));\n  }, [currentPage, reviewData]);\n\n  const handlePageChange = e => {\n    setCurrentPage(e);\n  };\n\n  const onAlert = () => {\n    Swal.fire({\n      icon: 'error',\n      text: '로그인을 먼저 해주세요❗️',\n      confirmButtonColor: '#FFD337',\n    }).then(res => {\n      navi('/login');\n    });\n  };\n\n  // 모달 관련 함수\n  const modalOnOff = () => {\n    setisModal(!isModal);\n  };\n\n  const closeModal = () => {\n    setisModal(false);\n  };\n\n  const moveCommunity = () => {\n    dispatch(setCategory('community'));\n    dispatch(setCommInputValue(''));\n    dispatch(setTempCommInputValue(''));\n    navi(`/community/${id}`);\n  };\n\n  const moveNotification = () => {\n    dispatch(setCategory('notification'));\n    dispatch(setCommInputValue(''));\n    dispatch(setTempCommInputValue(''));\n    navi(`/community/${id}`);\n  };\n\n  return (\n    <div className=\"relative mb-64 flex flex-col items-center pt-130 onlyMobile:pt-64\">\n      <div className=\"w-full max-w-[1280px] px-80 onlyMobile:max-w-full onlyMobile:px-0\">\n        {/* 메인 이미지 */}\n        <div\n          className=\"mb-48 h-432 overflow-hidden rounded-[16px] bg-cover bg-center onlyMobile:mb-24 onlyMobile:h-300 onlyMobile:rounded-0\"\n          style={{ backgroundImage: `url(${kinderData.imageUrl})` }}\n        />\n        <div className=\"flex\">\n          {/* 좌측 컨텐츠 영역 */}\n          <div className=\"w-[63%] pl-8 onlyMobile:w-full onlyMobile:px-24\">\n            <div className=\"pb-48 onlyMobile:pb-32\">\n              {/* 유치원 이름 */}\n              {kinderData && (\n                <h2 className=\"mb-24 text-28 font-bold text-black-900 onlyMobile:mb-12 onlyMobile:text-22\">\n                  {kinderData.name.replace(/\"/g, '')}\n                </h2>\n              )}\n              <p className=\"onlyMobile:text-14\">{kinderData.kinderIntro}</p>\n            </div>\n\n            {/* 유치원 정보 */}\n            <div className=\"content-line\">\n              <h5 className=\"mb-24 text-22 font-bold onlyMobile:text-18\">\n                유치원 정보\n              </h5>\n              <div className=\"flex w-full flex-col gap-4\">\n                {/* 주소 */}\n                <div className=\"ml-4 flex w-full flex-row gap-2\">\n                  <div className=\"flex w-150 gap-2\">\n                    <Pin className=\"h-24 w-24\" />\n                    <span>주소</span>\n                  </div>\n                  <p className=\"w-full\">\n                    {kinderData?.locations?.replace(/\"/g, '')}\n                  </p>\n                </div>\n                {/* 전화번호 */}\n                <div className=\"ml-4 flex w-full flex-row gap-2\">\n                  <div className=\"flex w-150 gap-2\">\n                    <Call className=\"h-24 w-24\" />\n                    <span>전화번호</span>\n                  </div>\n                  {!kinderData?.phoneNumber ? (\n                    <p className=\"w-full text-black-200\">전화번호가 없어요🥺</p>\n                  ) : (\n                    <p className=\"w-full\">{kinderData.phoneNumber}</p>\n                  )}\n                  {/* </p> */}\n                </div>\n                {/* SNS */}\n                <div className=\"ml-4 flex w-full flex-row gap-2\">\n                  <div className=\"flex w-150 gap-2\">\n                    <Sns className=\"h-24 w-24\" />\n                    <span>SNS</span>\n                  </div>\n                  {!kinderData?.snsUrl ? (\n                    <p className=\"w-full text-black-200\">\n                      연결된 SNS가 없어요🥺\n                    </p>\n                  ) : (\n                    // <p className=\"w-full\">{kinderData.snsUrl}</p>\n                    <a\n                      className=\"w-full\"\n                      href={kinderData.snsUrl}\n                      target=\"blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {kinderData.snsUrl}\n                    </a>\n                  )}\n                  {/* </p> */}\n                </div>\n                {/* 운영 시간 */}\n                <div className=\"ml-4 flex w-full flex-row gap-2\">\n                  <div className=\"flex w-150 gap-2\">\n                    <Time className=\"h-24 w-24\" />\n                    <span>운영 시간</span>\n                  </div>\n                  {!kinderData?.openHours || !kinderData?.closeHours ? (\n                    <p className=\"w-full text-black-200\">\n                      운영 시간 정보가 없어요🥺\n                    </p>\n                  ) : (\n                    <p className=\"w-full\">{`${kinderData.openHours} - ${kinderData.closeHours}`}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* 유치원 공지사항 */}\n            <div className=\"content-line\">\n              <h5 className=\"mb-24 text-22 font-bold onlyMobile:text-18\">\n                유치원 공지사항\n              </h5>\n              <div className=\"flex flex-col gap-8 onlyMobile:gap-6\">\n                {postData?.length !== 0 ? (\n                  <>\n                    {postData.map(el => {\n                      return <ListNotice key={el.postId} post={el} />;\n                    })}\n                    <Button\n                      className=\"border-gray btn-size-l shrink-0 onlyMobile:mt-16\"\n                      onClick={moveNotification}\n                    >\n                      공지사항 더보기\n                    </Button>\n                    {/* </Link> */}\n                  </>\n                ) : (\n                  <div className=\"flex-center flex-col\">\n                    <Perpett className=\"mb-16 h-104 w-104\" />\n                    <p className=\"text-14 text-black-350\">\n                      유치원 공지사항이 없어요.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* 유치원 후기 영역 */}\n            <div className=\"content-line\">\n              <div className=\"mb-24 flex\">\n                <div className=\"flex w-full items-center \">\n                  <StarOn className=\"mr-4 inline-block h-32 w-32 onlyMobile:h-24 onlyMobile:w-24\" />\n                  <span className=\"text-22 font-bold onlyMobile:text-18\">\n                    {`${kinderData?.ratedReviewsAvg?.toFixed(2)} ∙ 후기 \n                    ${kinderData?.ratedReviewsCount}개`}\n                  </span>\n                </div>\n                {auth ? (\n                  <Button\n                    className=\"color-yellow btn-size-l w-[160px]\"\n                    onClick={modalOnOff}\n                  >\n                    후기쓰기\n                  </Button>\n                ) : (\n                  <Button\n                    className=\"color-yellow btn-size-l w-[160px]\"\n                    onClick={onAlert}\n                  >\n                    후기쓰기\n                  </Button>\n                )}\n              </div>\n              {currentReview?.length !== 0 ? (\n                <div className=\"flex flex-col gap-8\">\n                  {currentReview.map(el => {\n                    return <ListReview key={el.reviewId} post={el} />;\n                  })}\n                </div>\n              ) : (\n                <div className=\"flex-center flex-col\">\n                  <Perpett className=\"mb-16 h-104 w-104\" />\n                  <p className=\"text-14 text-black-350\">\n                    첫 후기를 등록해보세요!\n                  </p>\n                </div>\n              )}\n              <Pagination\n                currentPage={currentPage}\n                count={reviewData.length}\n                onChange={handlePageChange}\n                itemsCountPerPage={5}\n              />\n            </div>\n          </div>\n\n          {/* 좌측 고정 영역 */}\n          {!isMobile ? (\n            <div className=\"z-10 ml-[8.3%] w-[33.3%]\">\n              {kinderData && (\n                <div className=\"sticky-card top-[128px] mb-48\">\n                  <h2 className=\"text-22 font-bold text-black-900\">\n                    {kinderData.name.replace(/\"/g, '')}\n                  </h2>\n                  <div className=\"mt-16 text-14\">\n                    <div className=\"mb-8 flex items-center\">\n                      <StarOn className=\"mr-4 inline-block\" />\n                      <span>{`${kinderData.ratedReviewsAvg.toFixed(2)} (${\n                        kinderData.ratedReviewsCount\n                      })`}</span>\n                    </div>\n                    <p>{kinderData.locations.replace(/\"/g, '')}</p>\n                  </div>\n                  <div className=\"flex\">\n                    <Button\n                      className=\"color-yellow btn-size-l mt-24 w-full\"\n                      onClick={moveCommunity}\n                    >\n                      커뮤니티 가기\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n\n        {/* 유치원 지도 영역 */}\n        <div className=\"content-line onlyMobile:mx-24 onlyMobile:w-auto\">\n          <div className=\"mb-24 flex w-full items-center\">\n            <h5 className=\"w-full text-22 font-bold onlyMobile:text-18\">\n              유치원 지도보기\n            </h5>\n          </div>\n          {kinderData && (\n            <p className=\"mb-16\">{kinderData.locations.replace(/\"/g, '')}</p>\n          )}\n          <div className=\"flex h-400 onlyMobile:h-240\">\n            {isLoaded ? (\n              <GoogleMap\n                mapContainerStyle={containerStyle}\n                center={center}\n                zoom={12}\n                onLoad={onLoad}\n                onUnmount={onUnmount}\n                options={{ disableDefaultUI: true, styles: myStyles }}\n              >\n                <MarkerF\n                  key={kinderData.id}\n                  position={{\n                    lat: kinderData.latitude,\n                    lng: kinderData.longitude,\n                  }}\n                  icon={{\n                    url: PinOn,\n                    scaledSize: new window.google.maps.Size(56, 56),\n                  }}\n                />\n              </GoogleMap>\n            ) : (\n              ''\n            )}\n          </div>\n        </div>\n        {isMobile ? (\n          <div className=\"fixed bottom-0 left-0 z-10 flex w-full bg-white px-20 py-10 shadow-bottomBoxShadow\">\n            <Link to={`/community/${id}`} className=\"flex w-full\">\n              <Button className=\"btn-size-l color-yellow w-full grow\">\n                커뮤니티 가기\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      {isModal ? <Modal onClick={closeModal} title=\"후기 작성하기\" /> : ''}\n    </div>\n  );\n}\n\nexport default KinderDetail;\n","/Users/jieun/Desktop/main-project/idle/src/pages/Write.jsx",["333","334","335"],[],"import { useMediaQuery } from 'react-responsive';\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\nimport {\n  setAuth,\n  setCommInputValue,\n  setTempCommInputValue,\n} from '../actions/areaFilterActions';\nimport QuillEditor from '../utils/quillEditor';\nimport Button from '../components/Button/Button';\nimport Radio from '../components/Radio/Radio';\nimport RadioGroup from '../components/Radio/RadioGroup';\nimport TextArea from '../components/TextArea';\nimport defaultImg from '../images/profile.png';\n\nfunction Write() {\n  const [category, setCategory] = useState('community');\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [contents, setContents] = useState('');\n  const [img, setImg] = useState([]);\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n  const navigate = useNavigate();\n  const { postId } = useParams();\n  const { id } = useParams();\n  const curProfile = useSelector(state => state.curProfile);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    window.scroll(0, 0);\n  }, []);\n\n  useEffect(() => {\n    if (postId) {\n      axios\n        .get(\n          `${process.env.REACT_APP_API_URL}/api/community/${id}/post/${postId}`,\n        )\n        .then(response => {\n          setTitle(response.data.data.title);\n          setContent(response.data.data.content);\n          setContents(content);\n        })\n        .catch(error => {\n          Swal.fire({\n            icon: 'error',\n            text: `error! ${error}`,\n            confirmButtonColor: '#FFD337',\n          });\n        });\n    }\n  }, [postId, content, id]);\n\n  const saveCategory = event => {\n    setCategory(event.target.value);\n  };\n\n  const saveTitle = event => {\n    setTitle(event.target.value);\n  };\n\n  const handleCancel = () => {\n    // 검색어 초기화\n    dispatch(setCommInputValue(''));\n    dispatch(setTempCommInputValue(''));\n\n    Swal.fire({\n      text: '글쓰기를 취소하고 이전 페이지로 돌아가시겠습니까?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#FFD337',\n      cancelButtonColor: '#ffffff',\n      confirmButtonText: '네',\n      cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n    }).then(result => {\n      if (result.isConfirmed) {\n        navigate(-1);\n      }\n    });\n  };\n\n  const submitData = event => {\n    // 검색어 초기화\n    dispatch(setCommInputValue(''));\n    dispatch(setTempCommInputValue(''));\n\n    if (!title || !content) {\n      Swal.fire({\n        icon: 'error',\n        text: '제목과 내용을 입력해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      });\n      return;\n    }\n\n    const formData = new FormData();\n\n    const headers = {\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'multipart/form-data',\n      },\n    };\n    if (postId) {\n      const data = {\n        title,\n        content: contents,\n        category,\n      };\n      formData.append(\n        'patchDto',\n        new Blob([JSON.stringify(data)], { type: 'application/json' }),\n      );\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/community/${id}/post/${postId}`,\n          formData,\n          headers,\n        )\n        .then(navigate(`/community/${id}/post/${postId}`))\n        .then(window.location.reload())\n        .catch(error => {\n          if (error.response && error.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요.',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n            navigate(`community/${id}`);\n          } else {\n            Swal.fire({\n              icon: 'error',\n              text: `error! ${error}`,\n              confirmButtonColor: '#FFD337',\n            });\n          }\n        });\n    } else {\n      const data = {\n        title,\n        content,\n        category,\n      };\n      formData.append(\n        'postDto',\n        new Blob([JSON.stringify(data)], { type: 'application/json' }),\n      );\n      axios\n        .post(\n          `${process.env.REACT_APP_API_URL}/api/community/${id}/post`,\n          formData,\n          headers,\n        )\n        .then(response => {\n          const url = response.headers.location;\n          const naviUrl = url.substring(url.lastIndexOf('/') + 1);\n          navigate(`/community/${id}/post/${naviUrl}`);\n        })\n        .catch(error => {\n          if (error.response && error.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요.',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n            navigate(`community/${id}`);\n          } else {\n            Swal.fire({\n              icon: 'error',\n              text: `error! ${error}`,\n              confirmButtonColor: '#FFD337',\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <div className=\"relative mb-64 flex flex-col items-center pt-130 onlyMobile:pt-92\">\n      <div className=\"w-full max-w-[1280px] px-80 onlyMobile:px-20\">\n        <div\n          className=\"flex-between fixed top-[60px] z-[10] flex w-[calc(100%-160px)] max-w-[1120px] border-b border-black-070\n        bg-white pb-30 pt-70 onlyMobile:relative onlyMobile:top-0 onlyMobile:z-0 onlyMobile:w-full onlyMobile:pt-0\"\n        >\n          <h3 className=\"w-full text-28 font-bold onlyMobile:text-22\">\n            글쓰기\n          </h3>\n          {!isMobile ? (\n            <div className=\"flex shrink-0\">\n              <Button className=\"btn-size-l mr-10\" onClick={handleCancel}>\n                취소\n              </Button>\n              <Button className=\"btn-size-l color-yellow\" onClick={submitData}>\n                등록하기\n              </Button>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n\n        <div className=\"mt-80 border-b border-black-070 py-50 onlyMobile:mt-0 onlyMobile:py-32\">\n          <p className=\"write-title\">현재 프로필</p>\n          <p className=\"write-sub-title\">\n            다른 프로필로 글을 작성하고 싶으신 경우 프로필을 변경 후 글을\n            작성해주세요.\n          </p>\n          <div className=\"flex\">\n            <div className=\"user-profile h-64 w-64\">\n              {curProfile.imageUrl ? (\n                <img src={curProfile.imageUrl} alt=\"프로필이미지\" />\n              ) : (\n                <img src={defaultImg} alt=\"임시이미지\" />\n              )}\n            </div>\n            <div className=\" ml-10 flex flex-col items-start justify-center\">\n              <p className=\"text-left text-16 font-bold onlyMobile:text-12\">\n                {curProfile.name}\n              </p>\n              <p className=\"text-10 text-black-350\">{curProfile.email}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"border-b border-black-070 py-50 onlyMobile:py-32\">\n          <p className=\"write-title\">카테고리 선택</p>\n          <p className=\"write-sub-title\">\n            견주님의 경우 공지사항 카테고리에는 글을 작성하실 수 없습니다.\n            커뮤니티를 선택 후 글을 작성해주세요!\n          </p>\n          <RadioGroup>\n            <Radio\n              id=\"category1\"\n              name=\"contact\"\n              value=\"community\"\n              defaultChecked\n              labelClass=\"text-14\"\n              onChange={saveCategory}\n            >\n              커뮤니티\n            </Radio>\n            <Radio\n              id=\"category2\"\n              name=\"contact\"\n              value=\"notification\"\n              labelClass=\"text-14 disabled:black-200\"\n              onChange={saveCategory}\n              disabled\n            >\n              공지사항\n            </Radio>\n          </RadioGroup>\n        </div>\n\n        <div className=\"border-b border-black-070 py-50 onlyMobile:py-32\">\n          <p className=\"write-title\">제목</p>\n          <p className=\"write-sub-title\">\n            작성하시는 글의 제목을 입력해주세요.\n          </p>\n          <div>\n            <TextArea\n              value={title}\n              maxLength=\"40\"\n              placeholder=\"제목을 입력해주세요.\"\n              onChange={saveTitle}\n              textClass=\"box-border h-20 w-full overflow-x-auto my-15\"\n              className=\"flex items-center\"\n            />\n          </div>\n        </div>\n\n        <div className=\" py-50 onlyMobile:py-32\">\n          <p className=\"write-title\">내용</p>\n          <p className=\"write-sub-title\">\n            작성하시는 글의 내용을 입력해주세요.\n          </p>\n          <div>\n            <QuillEditor\n              setImg={setImg}\n              content={content}\n              setContent={setContent}\n              contents={contents}\n              setContents={setContents}\n              postId={postId}\n            />\n          </div>\n        </div>\n      </div>\n      {isMobile ? (\n        <div className=\"fixed bottom-0 left-0 z-10 flex w-full bg-white px-20 py-10 shadow-bottomBoxShadow\">\n          <Button className=\"btn-size-l grow\" onClick={handleCancel}>\n            취소\n          </Button>\n          <Button className=\"btn-size-l color-yellow grow\" onClick={submitData}>\n            등록하기\n          </Button>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n}\n\nexport default Write;\n","/Users/jieun/Desktop/main-project/idle/src/pages/Mypage.jsx",["336","337","338","339","340","341","342","343","344","345"],["346"],"import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\nimport {\n  setCurProfile,\n  setAuth,\n  setActiveIndex,\n  setUser,\n} from '../actions/areaFilterActions';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport ListReview from '../components/List/ListReview';\nimport ListCommunity from '../components/List/ListCommunity';\nimport SettingModal from './SettingModal';\nimport ProfileCreateModal from './ProfileCreateModal';\nimport RenderProfile from '../utils/dropdown';\nimport Toast from '../utils/toast';\n\nimport Profile from '../images/profile.png';\nimport { ReactComponent as ArrowOpen } from '../images/arrow-open.svg';\nimport { ReactComponent as ArrowClose } from '../images/arrow-close.svg';\nimport { ReactComponent as Perpett } from '../images/perpett-on.svg';\nimport { ReactComponent as Plus } from '../images/plus.svg';\n\nfunction Mypage() {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navi = useNavigate();\n\n  const curProfile = useSelector(state => state.curProfile);\n  const auth = useSelector(state => state.auth);\n  const activeIndex = useSelector(state => state.activeIndex);\n\n  const [nickname, setNickname] = useState(\n    useSelector(state => state.curProfile.name),\n  );\n  const user = useSelector(state => state.user);\n  const [nameEdit, setNameEdit] = useState(false);\n  const [nameErr, setNameErr] = useState('');\n\n  const [dropDown, setDropDown] = useState(false);\n\n  const [profileModal, setProfileModal] = useState(false);\n  const [settingModal, setSettingModal] = useState(false);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: localStorage.getItem('token'),\n        },\n      })\n      .then(res => {\n        dispatch(setUser(res.data));\n      })\n      .catch(err => {\n        if (err.response && err.response.status === 401) {\n          Swal.fire({\n            icon: 'error',\n            text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n            confirmButtonColor: '#FFD337',\n          }).then(res => {\n            navi('/login');\n          });\n          dispatch(setAuth(false));\n          localStorage.removeItem('token');\n        }\n      });\n\n    axios\n      .get(\n        `${process.env.REACT_APP_API_URL}/api/users/profile/currentProfile`,\n        {\n          headers: {\n            Authorization: localStorage.getItem('token'),\n          },\n        },\n      )\n      .then(res => {\n        dispatch(setCurProfile(res.data.data));\n      })\n      .catch(err => {\n        if (err.response && err.response.status === 401) {\n          Swal.fire({\n            icon: 'error',\n            text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n            confirmButtonColor: '#FFD337',\n          }).then(res => {\n            navi('/login');\n          });\n          dispatch(setAuth(false));\n          localStorage.removeItem('token');\n        }\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // 모달 관련 함수\n  const modalProfileOnOff = () => {\n    setProfileModal(!profileModal);\n  };\n  const modalSettingOnOff = () => {\n    setSettingModal(!settingModal);\n  };\n  const modalClose = () => {\n    setProfileModal(false);\n    setSettingModal(false);\n  };\n\n  // 로그아웃 함수\n  const handleLogout = () => {\n    dispatch(setAuth(false));\n    localStorage.removeItem('token');\n    // dispatch(setCurUser({}));\n    dispatch(setUser([]));\n    dispatch(setCurProfile({}));\n    dispatch(setActiveIndex(''));\n    navi('/');\n  };\n\n  // 프로필 변경 드롭다운 함수\n  const handleDropdown = () => {\n    setDropDown(!dropDown);\n  };\n\n  // dropdown 에서 프로필 선택\n  function clickedProfile(profileId) {\n    axios\n      .post(\n        `${process.env.REACT_APP_API_URL}/api/users/profile/${profileId}`,\n        {},\n        {\n          headers: {\n            Authorization: localStorage.getItem('token'),\n          },\n        },\n      )\n      .then(() => {\n        axios\n          .get(\n            `${process.env.REACT_APP_API_URL}/api/users/profile/currentProfile`,\n            {\n              headers: {\n                Authorization: localStorage.getItem('token'),\n              },\n            },\n          )\n          .then(res => {\n            dispatch(setCurProfile(res.data.data));\n            setDropDown(false);\n            dispatch(setActiveIndex(res.data.data.profileId));\n            navi(`/mypage/${res.data.data.profileId}`);\n          })\n          .catch(err => {\n            if (err.response && err.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              }).then(res => {\n                navi('/login');\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            }\n          });\n      });\n  }\n\n  // 닉네임 수정 함수\n  const handleNameInput = () => {\n    setNameEdit(!nameEdit);\n    setNickname(curProfile.name);\n    setNameErr('');\n  };\n  const handleNameChange = e => {\n    setNickname(e.target.value.trim());\n  };\n\n  // 닉네임 수정하기\n  const handleNameEdit = () => {\n    if (!nickname) {\n      setNameErr('닉네임을 입력해주세요.');\n    } else {\n      setNameErr('');\n\n      const formData = new FormData();\n      const data = {\n        name: nickname,\n      };\n      formData.append(\n        'patchDto',\n        new Blob([JSON.stringify(data)], { type: 'application/json' }),\n      );\n      setNameEdit(false);\n\n      if (nickname.length > 0) {\n        axios\n          .patch(\n            `${process.env.REACT_APP_API_URL}/api/users/profile/${curProfile.profileId}`,\n            formData,\n            {\n              headers: {\n                'Content-Type': 'multipart/form-data',\n                Authorization: localStorage.getItem('token'),\n              },\n            },\n          )\n          .then(res => {\n            const resData = res.data.data.name;\n            dispatch(setCurProfile({ ...curProfile, name: resData }));\n            Toast.fire({\n              title: '닉네임 변경이 완료되었습니다.',\n              background: '#25B865',\n              color: 'white',\n            });\n          })\n          .catch(err => {\n            if (err.response && err.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              }).then(res => {\n                navi('/login');\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            } else {\n              Toast.fire({\n                title: '닉네임 수정을 다시 시도해주세요.',\n                background: '#DE4F54',\n                color: 'white',\n              });\n            }\n          });\n      }\n    }\n  };\n\n  // 프로필 삭제하기\n  const handleProfileDelete = profileId => {\n    Swal.fire({\n      text: '해당 프로필을 삭제하시겠습니까??',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#FFD337',\n      cancelButtonColor: '#ffffff',\n      confirmButtonText: '네',\n      cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n    }).then(result => {\n      if (result.isConfirmed) {\n        axios\n          .delete(\n            `${process.env.REACT_APP_API_URL}/api/users/profile/${profileId}`,\n            {\n              headers: {\n                Authorization: localStorage.getItem('token'),\n              },\n            },\n          )\n          .then(res => {\n            if (user.length === 1) {\n              dispatch(setActiveIndex(user[0]));\n              dispatch(setCurProfile(user[0]));\n            }\n            window.location.reload();\n          })\n          .then(\n            Toast.fire({\n              title: '프로필 삭제가 완료되었습니다.',\n              background: '#25B865',\n              color: 'white',\n            }),\n          )\n          .catch(err => {\n            if (err.response && err.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              }).then(res => {\n                navi('/login');\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            }\n          });\n      }\n    });\n  };\n\n  const onChangeImg = e => {\n    e.preventDefault();\n\n    if (e.target.files) {\n      const uploadFile = e.target.files[0];\n\n      const formData = new FormData();\n      formData.append('image', uploadFile);\n\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/users/profile/${curProfile.profileId}`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n              Authorization: localStorage.getItem('token'),\n            },\n          },\n        )\n        .then(res => {\n          dispatch(setCurProfile(res.data.data));\n          Toast.fire({\n            title: '프로필 사진 변경이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n          dispatch(setCurProfile(res.data.data));\n          window.location.reload();\n        })\n        .catch(err => {\n          if (err.response && err.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            }).then(res => {\n              navi('/login');\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n          } else {\n            Toast.fire({\n              title: '사진 변경을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <div className=\"relative flex flex-col items-center pt-130 onlyMobile:pt-88\">\n      <div className=\"w-full max-w-[1280px] px-80 onlyMobile:max-w-full onlyMobile:px-24\">\n        {auth ? (\n          <div className=\"flex onlyMobile:flex-col\">\n            <div className=\"mr-[8.3%] w-[33.3%] onlyMobile:mr-0 onlyMobile:w-full\">\n              {/* 좌측 프로필 */}\n              <div className=\"sticky-card\">\n                <div className=\"flex-center flex-col\">\n                  <div className=\"user-profile mb-8 h-48 w-48 overflow-hidden rounded-[12px] onlyMobile:h-64 onlyMobile:w-64\">\n                    {curProfile.imageUrl ? (\n                      <img src={curProfile.imageUrl} alt=\"img\" />\n                    ) : (\n                      <img src={Profile} alt=\"defaultImage\" />\n                    )}\n                  </div>\n                  <div className=\"flex-center w-full items-center py-8\">\n                    {dropDown ? (\n                      <Button\n                        type=\"button\"\n                        onClick={handleDropdown}\n                        className=\"btn-size-s color-white w-full active:bg-black-025 \"\n                      >\n                        <span className=\"min-w-88 px-8 text-center text-16 font-bold onlyMobile:text-14\">\n                          {curProfile.name}\n                        </span>\n                        <ArrowClose className=\"h-6 min-w-10 cursor-pointer\" />\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"button\"\n                        onClick={handleDropdown}\n                        className=\"btn-size-s color-white w-full active:bg-black-025\"\n                      >\n                        <span className=\"min-w-88 px-8 text-center text-16 font-bold onlyMobile:text-14\">\n                          {curProfile.name}\n                        </span>\n                        <ArrowOpen className=\"h-6 min-w-10 cursor-pointer\" />\n                      </Button>\n                    )}\n                    {dropDown ? (\n                      <div className=\"dropdown-box top-[128px] z-10 mx-20 w-[90%] px-12 py-16 onlyMobile:top-[148px]\">\n                        <ul className=\"profile w-full py-2 text-left\">\n                          <RenderProfile\n                            clickedProfile={(idx, id) =>\n                              clickedProfile(idx, id)\n                            }\n                            handleDelete={handleProfileDelete}\n                          />\n                        </ul>\n                      </div>\n                    ) : null}\n                  </div>\n\n                  {/* 내가 쓴 총 후기 및 게시글 */}\n                  <p className=\"mb-16 text-12 text-black-350\">\n                    {curProfile.email}\n                  </p>\n                  <div className=\"flex-center mb-24 w-full gap-4 onlyMobile:mb-16\">\n                    <div className=\"flex-center w-full flex-col\">\n                      <p className=\"text-12 text-black-350\">후기</p>\n                      <p className=\"text-28 font-bold onlyMobile:text-18\">\n                        {curProfile?.reviews?.length}\n                      </p>\n                    </div>\n                    <div className=\"flex-center w-full flex-col\">\n                      <p className=\"text-12 text-black-350\">게시글</p>\n                      <p className=\"text-28 font-bold onlyMobile:text-18\">\n                        {curProfile?.posts?.length}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* 프로필 추가, 설정, 로그아웃 버튼 */}\n                <div className=\"flex justify-between border-t-[1px] border-black-070 pt-24 text-16 onlyMobile:pt-20 onlyMobile:text-14\">\n                  <div className=\"flex w-full flex-col items-center\">\n                    {user && user.length < 4 ? (\n                      <>\n                        <Button\n                          className=\"color-yellow flex-center btn-size-l onlyMobile:btn-size-s mb-8 onlyMobile:w-32\"\n                          icon=\"plus\"\n                          onClick={modalProfileOnOff}\n                        />\n                        <span className=\"text-12 text-black-350\">\n                          프로필 추가\n                        </span>\n                      </>\n                    ) : (\n                      <>\n                        <Button\n                          className=\"color-yellow flex-center btn-size-l onlyMobile:btn-size-s mb-8 onlyMobile:w-32\"\n                          onClick={modalProfileOnOff}\n                          disabled\n                        >\n                          <Plus />\n                        </Button>\n                        <span className=\"text-12 text-black-100\">\n                          프로필 추가\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  <div className=\"flex w-full flex-col items-center\">\n                    <Button\n                      className=\"border-gray flex-center btn-size-l onlyMobile:btn-size-s mb-8 onlyMobile:w-32\"\n                      icon=\"setting\"\n                      onClick={modalSettingOnOff}\n                    />\n                    <span className=\"text-12 text-black-350\">계정 설정</span>\n                  </div>\n                  <div className=\"flex w-full flex-col items-center\">\n                    <Button\n                      className=\"border-gray flex-center btn-size-l onlyMobile:btn-size-s mb-8 onlyMobile:w-32\"\n                      icon=\"logout\"\n                      onClick={handleLogout}\n                    />\n                    <span className=\"text-12 text-black-350\">로그아웃</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 우측 정보 */}\n            <div className=\"w-[63%] pl-8 onlyMobile:w-full\">\n              <div className=\"pb-48 onlyMobile:py-32\">\n                <div className=\"mb-24 flex items-center justify-between onlyMobile:mb-16 \">\n                  <h5 className=\"text-22 font-bold text-black-900 onlyMobile:text-18\">\n                    프로필\n                  </h5>\n                </div>\n                {/* 사진 및 닉네임 변경 */}\n                <div className=\"mb-24 onlyMobile:mb-20\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"mb-4 text-14 text-black-350 onlyMobile:text-12\">\n                      프로필 사진\n                    </p>\n                    <div>\n                      <label htmlFor=\"uploadImage\">\n                        <p className=\"btn-text-default cursor-pointer text-14 text-black-350 onlyMobile:text-12\">\n                          변경\n                        </p>\n\n                        <input\n                          id=\"uploadImage\"\n                          type=\"file\"\n                          className=\"hidden\"\n                          onChange={onChangeImg}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                  <div className=\"user-profile h-80 w-80 onlyMobile:h-48 onlyMobile:w-48\">\n                    {curProfile.imageUrl ? (\n                      <img src={curProfile.imageUrl} alt=\"img\" />\n                    ) : (\n                      <img src={Profile} alt=\"defaultImage\" />\n                    )}\n                  </div>\n                </div>\n                <div className=\"mb-24 onlyMobile:mb-20\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"mb-4 text-14 text-black-350 onlyMobile:text-12\">\n                      닉네임\n                    </p>\n                    {!nameEdit ? (\n                      <Button\n                        className=\"btn-text-default text-14 text-black-350 onlyMobile:text-12\"\n                        onClick={handleNameInput}\n                      >\n                        수정\n                      </Button>\n                    ) : (\n                      ''\n                    )}\n                  </div>\n\n                  {/* 닉네임 수정 시 인풋 과 버튼 */}\n                  {!nameEdit ? (\n                    <p className=\"onlyMobile:text-14\">{curProfile.name}</p>\n                  ) : (\n                    <div>\n                      <div className=\"flex\">\n                        <Input\n                          value={nickname}\n                          onChange={handleNameChange}\n                          isError={nameErr}\n                        />\n                      </div>\n                      <div className=\"mt-16 flex gap-3\">\n                        <Button\n                          className=\"color-yellow btn-size-l\"\n                          onClick={handleNameEdit}\n                        >\n                          수정\n                        </Button>\n                        <Button\n                          className=\"border-gray btn-size-l\"\n                          onClick={handleNameInput}\n                        >\n                          취소\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {curProfile.breed ? (\n                  <div className=\"\">\n                    <p className=\"mb-4 text-14 text-black-350 onlyMobile:text-12\">\n                      견종\n                    </p>\n                    <p className=\"onlyMobile:text-14\">{curProfile.breed}</p>\n                  </div>\n                ) : (\n                  ''\n                )}\n              </div>\n\n              {/* 작성한 후기 */}\n              <div className=\"content-line w-full\">\n                <h5 className=\"mb-24 text-22 font-bold onlyMobile:mb-16 onlyMobile:text-18\">\n                  작성한 후기\n                </h5>\n                {curProfile?.reviews?.length !== 0 ? (\n                  <div className=\"flex flex-col gap-8\">\n                    {curProfile?.reviews?.map(el => {\n                      return (\n                        <ListReview\n                          key={el.reviewId}\n                          post={el}\n                          className=\"hidden\"\n                        />\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"flex-center flex-col\">\n                    <Perpett className=\"mb-16 h-104 w-104\" />\n                    <p className=\"text-14 text-black-350\">\n                      아직 작성한 후기가 없어요.\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* 작성한 게시글 */}\n              <div className=\"content-line w-[cal(63%-8px)]\">\n                <h5 className=\"mb-24 text-22 font-bold onlyMobile:mb-16 onlyMobile:text-18\">\n                  작성한 게시글\n                </h5>\n                {curProfile?.posts?.length !== 0 ? (\n                  <div className=\"flex flex-col gap-8\">\n                    {curProfile?.posts?.map(el => {\n                      return (\n                        <ListCommunity\n                          key={el.postId}\n                          post={el}\n                          className=\"text-max hidden\"\n                        />\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"flex-center flex-col\">\n                    <Perpett className=\"mb-16 h-104 w-104\" />\n                    <p className=\"text-14 text-black-350\">\n                      아직 작성한 게시글이 없어요.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      {profileModal ? (\n        <ProfileCreateModal\n          onClick={modalClose}\n          setProfileModal={setProfileModal}\n        />\n      ) : (\n        ''\n      )}\n      {settingModal ? (\n        <SettingModal onClick={modalClose} setSettingModal={setSettingModal} />\n      ) : (\n        ''\n      )}\n    </div>\n  );\n}\n\nexport default Mypage;\n","/Users/jieun/Desktop/main-project/idle/src/pages/SignUp.jsx",["347","348","349"],[],"import axios from 'axios';\nimport { useMediaQuery } from 'react-responsive';\nimport { useCallback, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport RadioGroup from '../components/Radio/RadioGroup';\nimport Radio from '../components/Radio/Radio';\nimport Toast from '../utils/toast';\nimport { ReactComponent as Kakao } from '../images/logo-kakao.svg';\nimport { ReactComponent as Google } from '../images/logo-google.svg';\n\nfunction SignUp() {\n  const navi = useNavigate();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  const [user, setUser] = useState({\n    email: '',\n    password: '',\n    checkTeacher: '',\n  });\n  const [officials, setOfficials] = useState(false);\n  const [confirmPwd, setConfirmPwd] = useState('');\n\n  // 인증메일\n  const [confirmEmail, setConfirmEmail] = useState('');\n  const [confirmInput, setConfirmInput] = useState('');\n  const [emailSendComp, setEmailSendComp] = useState('');\n  const [confirmComp, setConfirmComp] = useState('');\n\n  // 오류메시지\n  const [emailErr, setEmailErr] = useState('');\n  const [pwdErr, setPwdErr] = useState('');\n  const [confirmPwdErr, setConfirmPwdErr] = useState('');\n  const [confirmEmailErr, setConfirmEmailErr] = useState('');\n\n  // 유효성검사\n  const [isEmail, setIsEmail] = useState(false);\n  const [isPwd, setIsPwd] = useState(false);\n  const [isConfirmPwd, setIsConfirmPwd] = useState(false);\n  const [isConfirmEmailBtn, setIsConfirmEmailBtn] = useState(false);\n  const [isConfirmEmail, setIsConfirmEmail] = useState(false);\n\n  const handleOfficialsClick = value => () => {\n    setUser({ ...user, checkTeacher: value });\n    setOfficials(value);\n  };\n\n  const onSignup = useCallback(\n    e => {\n      e.preventDefault();\n\n      if (!confirmInput) {\n        setConfirmEmailErr('인증 코드를 입력해주세요.');\n        setIsConfirmEmail(false);\n      }\n\n      if (!isConfirmEmail) {\n        setConfirmEmailErr('인증 완료 버튼을 눌러주세요.');\n        setIsConfirmEmail(false);\n      }\n\n      if (!user.email) {\n        setEmailErr('이메일을 입력해주세요.');\n      }\n      if (!user.password) {\n        setPwdErr('비밀번호를 입력해주세요.');\n      }\n\n      if (isEmail && isPwd && isConfirmPwd && isConfirmEmail) {\n        setEmailErr('');\n        setPwdErr('');\n        setConfirmPwdErr('');\n        setConfirmEmailErr('');\n\n        axios\n          .post(`${process.env.REACT_APP_API_URL}/api/users`, {\n            email: user.email,\n            password: user.password,\n            checkOfficials: officials,\n          })\n          .then(res => {\n            navi('/login');\n            Toast.fire({\n              title: '회원가입이 완료되었습니다.',\n              background: '#25B865',\n              color: 'white',\n            });\n          })\n          .catch(err => {\n            if (err.response && err.response.status === 409) {\n              setEmailErr('이미 가입되어 있는 이메일입니다.');\n            } else {\n              Toast.fire({\n                title: '회원가입을 다시 시도해주세요.',\n                background: '#DE4F54',\n                color: 'white',\n              });\n            }\n          });\n      }\n    },\n    [\n      user,\n      officials,\n      navi,\n      isEmail,\n      isPwd,\n      isConfirmPwd,\n      isConfirmEmail,\n      confirmInput,\n    ],\n  );\n\n  const handleConfirmEmail = e => {\n    setConfirmInput(e.target.value);\n    setEmailSendComp('');\n    if (confirmInput) {\n      setConfirmEmailErr('');\n    }\n  };\n\n  const onCheckEmail = useCallback(\n    e => {\n      const valiEmail =\n        /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n      const CurrentEmail = e.target.value;\n      setUser({ ...user, email: CurrentEmail });\n\n      setIsConfirmEmailBtn(false);\n\n      if (user.email.length === 0) {\n        setEmailErr('이메일을 입력해주세요.');\n        setIsEmail(false);\n      } else if (!valiEmail.test(CurrentEmail)) {\n        setEmailErr('이메일 형식이 올바르지 않습니다.');\n        setIsEmail(false);\n      } else {\n        setEmailErr('');\n        setIsEmail(true);\n      }\n    },\n    [user],\n  );\n\n  const sendEmail = () => {\n    if (user.email.length === 0) {\n      setEmailErr('이메일을 입력해주세요.');\n      setIsEmail(false);\n    } else if (user.email.length > 0) {\n      setEmailErr('');\n    } else {\n      setEmailErr('');\n      setIsEmail(true);\n    }\n\n    if (isEmail) {\n      axios\n        .post(`${process.env.REACT_APP_API_URL}/api/login/mailConfirm`, {\n          email: user.email,\n        })\n        .then(res => {\n          console.log(res);\n          setEmailSendComp('인증 코드 전송이 완료되었습니다.');\n          setConfirmEmail(res.data);\n          Toast.fire({\n            title: '인증 코드 전송이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n        })\n        .catch(err => {\n          setIsConfirmEmailBtn(false);\n          if (err.response && err.response.status === 409) {\n            setEmailErr('이미 가입되어 있거나 탈퇴한 이메일입니다.');\n          } else {\n            Toast.fire({\n              title: '인증 코드 전송을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n          }\n        });\n    }\n  };\n\n  const checkEmail = () => {\n    if (confirmInput && confirmEmail === confirmInput) {\n      setConfirmComp('이메일 인증이 완료되었습니다.');\n      setConfirmEmailErr('');\n      setIsConfirmEmail(true);\n    } else {\n      setConfirmComp('');\n      setConfirmEmailErr('인증 코드를 다시 확인해주세요.');\n      setIsConfirmEmail(false);\n    }\n  };\n\n  const onCheckPwd = useCallback(\n    e => {\n      const valiPwd = /^[^\\s]{8,15}$/;\n      const CurrentPwd = e.target.value;\n      setUser({ ...user, password: CurrentPwd });\n\n      if (!CurrentPwd) {\n        setPwdErr('비밀번호를 입력해주세요.');\n        setIsPwd(false);\n      } else if (!valiPwd.test(CurrentPwd)) {\n        setPwdErr('8~15자의 비밀번호를 입력해주세요.');\n        setIsPwd(false);\n      } else {\n        setPwdErr('');\n        setIsPwd(true);\n      }\n    },\n    [user],\n  );\n\n  const onCheckConfirmPwd = useCallback(\n    e => {\n      const CurrentConfirmPwd = e.target.value;\n      setConfirmPwd(CurrentConfirmPwd);\n\n      if (user.password === CurrentConfirmPwd) {\n        setConfirmPwdErr('');\n        setIsConfirmPwd(true);\n      } else {\n        setConfirmPwdErr('비밀번호를 다시 확인해주세요.');\n        setIsConfirmPwd(false);\n      }\n    },\n    [user.password],\n  );\n\n  const googleSignup = async e => {\n    e.preventDefault();\n    const googleAuthUrl = `${process.env.REACT_APP_API_URL}/oauth2/authorization/google?redirect_uri=${process.env.REACT_APP_API_URL}/login/oauth2/code/google`;\n    window.location.href = googleAuthUrl;\n  };\n\n  const kakaoSignup = async e => {\n    e.preventDefault();\n    const kakaoAuthUrl = `${process.env.REACT_APP_API_URL}/oauth2/authorization/kakao?redirect_uri=${process.env.REACT_APP_API_URL}/login/oauth2/code/kakao`;\n    window.location.href = kakaoAuthUrl;\n  };\n\n  const signup = () => {\n    return (\n      <>\n        <form className=\"px-8\" onSubmit={onSignup}>\n          <div className=\"mb-24 flex\">\n            <Input\n              labelText=\"이메일\"\n              type=\"email\"\n              placeholder=\"이메일 입력해주세요.\"\n              onChange={onCheckEmail}\n              isError={emailErr}\n              isComp={emailSendComp}\n            />\n            <Button\n              className=\"color-yellow btn-size-l ml-8 mt-28 h-50 shrink-0 grow-0\"\n              onClick={() => {\n                sendEmail();\n                setIsConfirmEmailBtn(true);\n              }}\n              disabled={isConfirmEmailBtn}\n            >\n              인증하기\n            </Button>\n          </div>\n          <div className=\"mb-24 flex\">\n            <Input\n              labelText=\"인증번호\"\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleConfirmEmail}\n              isError={confirmEmailErr}\n              isComp={confirmComp}\n            />\n            <Button\n              className=\"color-yellow btn-size-l ml-8 mt-28 h-50 shrink-0 grow-0\"\n              onClick={checkEmail}\n            >\n              인증 완료\n            </Button>\n          </div>\n          <div className=\"mb-24 flex flex-col\">\n            <p className=\"mb-8 text-left text-14 text-black-350\">\n              생성 계정 선택\n            </p>\n            <RadioGroup>\n              <Radio\n                id=\"1\"\n                name=\"contact\"\n                value=\"user\"\n                onClick={handleOfficialsClick(false)}\n                defaultChecked\n              >\n                견주님\n              </Radio>\n              <Radio\n                id=\"2\"\n                name=\"contact\"\n                value=\"owner\"\n                onClick={handleOfficialsClick(true)}\n              >\n                유치원 관계자\n              </Radio>\n            </RadioGroup>\n          </div>\n          <div className=\"mb-24\">\n            <Input\n              labelText=\"비밀번호\"\n              placeholder=\"비밀번호를 입력해주세요.\"\n              type=\"password\"\n              onChange={onCheckPwd}\n              isError={pwdErr}\n            />\n          </div>\n          <div className=\"mb-24\">\n            <Input\n              labelText=\"비밀번호 확인\"\n              placeholder=\"비밀번호를 다시 입력해주세요.\"\n              type=\"password\"\n              onChange={onCheckConfirmPwd}\n              isError={confirmPwdErr}\n            />\n          </div>\n          <Button\n            className=\"color-yellow btn-size-l w-full\"\n            // disabled={!(isEmail && isPwd && isConfirmPwd && isConfirmEmail)}\n            onClick={onSignup}\n          >\n            이메일로 회원가입\n          </Button>\n        </form>\n        <div className=\"login-line\">또는</div>\n        <div>\n          <Button\n            className=\"border-gray btn-size-l mb-16 w-full gap-1.5\"\n            onClick={kakaoSignup}\n          >\n            <Kakao />\n            카카오 회원가입\n          </Button>\n          <Button\n            className=\"border-gray btn-size-l w-full gap-1.5\"\n            onClick={googleSignup}\n          >\n            <Google />\n            구글 회원가입\n          </Button>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"flex-center onlyMobile:login-m-align h-screen bg-black-025 onlyMobile:bg-white\">\n      <div className=\"mt-80 onlyMobile:w-full onlyMobile:px-24\">\n        {!isMobile && <div className=\"login-card\">{signup()}</div>}\n        {isMobile && <div>{signup()}</div>}\n        <div className=\"flex-center mt-32\">\n          <p className=\"mr-24 text-14 text-black-200 onlyMobile:text-12\">\n            이미 계정이 있으신가요?\n          </p>\n          <Link to=\"/login\">\n            <p className=\"text-14 text-black-900 onlyMobile:text-12\">\n              로그인 바로가기\n            </p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SignUp;\n","/Users/jieun/Desktop/main-project/idle/src/pages/Community.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/pages/FindPw.jsx",["350","351","352"],[],"import axios from 'axios';\nimport { useMediaQuery } from 'react-responsive';\nimport { useEffect, useCallback, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport Toast from '../utils/toast';\n\nfunction FindPw() {\n  const navi = useNavigate();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  const [value, setValue] = useState({\n    email: '',\n    password1: '',\n    password2: '',\n  });\n\n  const [confirmPwd, setConfirmPwd] = useState('');\n\n  // 인증메일\n  const [confirmEmail, setConfirmEmail] = useState('');\n  const [confirmInput, setConfirmInput] = useState('');\n  const [emailSendComp, setEmailSendComp] = useState('');\n  const [confirmComp, setConfirmComp] = useState('');\n\n  // 오류메시지\n  const [emailErr, setEmailErr] = useState('');\n  const [pwdErr, setPwdErr] = useState('');\n  const [confirmPwdErr, setConfirmPwdErr] = useState('');\n  const [confirmEmailErr, setConfirmEmailErr] = useState('');\n\n  // 유효성검사\n  const [isEmail, setIsEmail] = useState(false);\n  const [isPwd, setIsPwd] = useState(false);\n  const [isConfirmPwd, setIsConfirmPwd] = useState(false);\n  const [isConrirmEmailBtn, setIsConfirmEmailBtn] = useState(false);\n  const [isConfirmEmail, setIsConfirmEmail] = useState(false);\n\n  const handleConfirmEmail = e => {\n    setConfirmInput(e.target.value);\n    // setEmailSendComp('');\n    setConfirmComp('');\n    if (confirmInput) {\n      setConfirmEmailErr('');\n    }\n  };\n\n  const onCheckEmail = useCallback(\n    e => {\n      const valiEmail =\n        /([\\w-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/;\n      const CurrentEmail = e.target.value;\n      setValue({ ...value, email: CurrentEmail });\n\n      setIsConfirmEmailBtn(false);\n\n      if (value.email.length === 0) {\n        setEmailErr('이메일을 입력해주세요.');\n        setEmailSendComp('');\n        setIsEmail(false);\n      } else if (!valiEmail.test(CurrentEmail)) {\n        setEmailErr('이메일 형식이 올바르지 않습니다.');\n        setEmailSendComp('');\n        setIsEmail(false);\n      } else {\n        setEmailErr('');\n        setEmailSendComp('');\n        setIsEmail(true);\n      }\n    },\n    [value],\n  );\n\n  const onCheckPwd = useCallback(\n    e => {\n      const valiPwd = /^[^\\s]{8,15}$/;\n      const CurrentPwd = e.target.value;\n      setValue({ ...value, password1: CurrentPwd });\n\n      if (!CurrentPwd) {\n        setPwdErr('비밀번호를 입력해주세요.');\n        setIsPwd(false);\n      } else if (!valiPwd.test(CurrentPwd)) {\n        setPwdErr('8~15자의 비밀번호를 입력해주세요.');\n        setIsPwd(false);\n      } else {\n        setPwdErr('');\n        setIsPwd(true);\n      }\n    },\n    [value],\n  );\n\n  const onCheckConfirmPwd = useCallback(\n    e => {\n      const CurrentConfirmPwd = e.target.value;\n      setConfirmPwd(CurrentConfirmPwd);\n      setValue({ ...value, password2: CurrentConfirmPwd });\n\n      if (value.password1 === CurrentConfirmPwd) {\n        setConfirmPwdErr('');\n        setIsConfirmPwd(true);\n      } else {\n        setConfirmPwdErr('비밀번호를 다시 확인해주세요.');\n        setIsConfirmPwd(false);\n      }\n    },\n    [value],\n  );\n\n  const sendEmail = () => {\n    if (value.email.length === 0) {\n      setEmailErr('이메일을 입력해주세요.');\n      setIsEmail(false);\n    } else {\n      setEmailErr('');\n      setIsEmail(true);\n    }\n\n    if (isEmail) {\n      axios\n        .post(`${process.env.REACT_APP_API_URL}/api/login/findPassword`, {\n          email: value.email,\n        })\n        .then(res => {\n          setEmailSendComp('인증 코드 전송이 완료되었습니다.');\n          setConfirmEmail(res.data);\n          Toast.fire({\n            title: '인증 코드 전송이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n        })\n        .catch(err => {\n          setIsConfirmEmailBtn(false);\n          if (err.response && err.response.status === 404) {\n            setEmailErr(err.response.message);\n          } else {\n            Toast.fire({\n              title: '인증 코드 전송을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n          }\n        });\n    }\n  };\n\n  const checkEmail = () => {\n    if (confirmInput && confirmEmail === confirmInput) {\n      setConfirmComp('이메일 인증이 완료되었습니다.');\n      setConfirmEmailErr('');\n      setIsConfirmEmail(true);\n    } else {\n      setConfirmComp('');\n      setConfirmEmailErr('인증 코드를 다시 확인해주세요.');\n      setIsConfirmEmail(false);\n    }\n  };\n\n  const onChangePwd = e => {\n    e.preventDefault();\n    onCheckEmail(e);\n    onCheckPwd(e);\n    onCheckConfirmPwd(e);\n    checkEmail(e);\n\n    if (!confirmInput) {\n      setConfirmEmailErr('인증 코드를 입력해주세요.');\n      setIsConfirmEmail(false);\n    }\n\n    if (isEmail && isPwd && isConfirmPwd && isConfirmEmail) {\n      setEmailErr('');\n      setPwdErr('');\n      setConfirmPwdErr('');\n      setConfirmEmailErr('');\n      setEmailSendComp('');\n      setConfirmComp('');\n\n      axios\n        .patch(`${process.env.REACT_APP_API_URL}/api/users/resetPassword`, {\n          email: value.email,\n          password1: value.password1,\n          password2: value.password2,\n        })\n        .then(res => {\n          navi('/login');\n        })\n        .catch(err => {\n          if (err.response && err.response.status === 404) {\n            setEmailErr(err.response.message);\n          } else if (err.response && err.response.status === 403) {\n            setEmailErr('간편 회원가입 유저는 비밀번호 수정이 불가능합니다.');\n          }\n        });\n    }\n  };\n\n  const findPassword = () => {\n    return (\n      <>\n        <p className=\"mb-24 text-28 font-bold onlyMobile:mb-32 onlyMobile:text-22\">\n          비밀번호 찾기\n        </p>\n        <form className=\"px-8\" onSubmit={onChangePwd}>\n          <div className=\"mb-24 flex\">\n            <Input\n              labelText=\"이메일\"\n              type=\"email\"\n              placeholder=\"이메일을 입력해주세요.\"\n              onChange={onCheckEmail}\n              isError={emailErr}\n              isComp={emailSendComp}\n            />\n            <Button\n              className=\"color-yellow btn-size-l ml-8 mt-28 h-50 shrink-0 grow-0\"\n              onClick={() => {\n                setIsConfirmEmailBtn(true);\n                sendEmail();\n              }}\n              disabled={isConrirmEmailBtn}\n            >\n              인증하기\n            </Button>\n          </div>\n          <div className=\"mb-24 flex\">\n            <Input\n              labelText=\"인증번호\"\n              placeholder=\"인증번호를 입력해주세요.\"\n              onChange={handleConfirmEmail}\n              isError={confirmEmailErr}\n              isComp={confirmComp}\n            />\n            <Button\n              className=\"color-yellow btn-size-l ml-8 mt-28 h-50 shrink-0 grow-0\"\n              onClick={checkEmail}\n            >\n              인증 완료\n            </Button>\n          </div>\n          <div className=\"mb-24\">\n            <Input\n              labelText=\"새 비밀번호\"\n              placeholder=\"비밀번호를 입력해주세요.\"\n              type=\"password\"\n              onChange={onCheckPwd}\n              isError={pwdErr}\n            />\n          </div>\n          <div className=\"mb-24\">\n            <Input\n              labelText=\"새 비밀번호 확인\"\n              placeholder=\"비밀번호를 다시 입력해주세요.\"\n              type=\"password\"\n              onChange={onCheckConfirmPwd}\n              isError={confirmPwdErr}\n            />\n          </div>\n          <Button\n            className=\"color-yellow btn-size-l w-full\"\n            onClick={onChangePwd}\n          >\n            비밀번호 변경\n          </Button>\n        </form>\n        <div className=\"login-line px-8\">로그인</div>\n\n        <div className=\"px-8\">\n          <Link to=\"/login\">\n            <Button className=\"border-gray btn-size-l mb-16 w-full gap-1.5\">\n              로그인 바로가기\n            </Button>\n          </Link>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"flex-center onlyMobile:login-m-align h-screen bg-black-025 onlyMobile:bg-white\">\n      <div className=\"mt-80 onlyMobile:w-full onlyMobile:px-24\">\n        {!isMobile ? (\n          <div className=\"login-card\">{findPassword()}</div>\n        ) : (\n          <div>{findPassword()}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FindPw;\n","/Users/jieun/Desktop/main-project/idle/src/pages/NotFound.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/actions/areaFilterActions.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/reducers/areaFilterReducers.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/InputBtn.jsx",["353","354","355"],[],"import { useState } from 'react';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactComponent as Search } from '../images/search.svg';\nimport {\n  setAreaFilter,\n  setKinderGartens,\n  setInputValue,\n  setSearchValue,\n  setCommInputValue,\n  setTempCommInputValue,\n  setSearchClickState,\n} from '../actions/areaFilterActions';\nimport cls from '../utils/tailwind';\n\nfunction InputBtn(props) {\n  const { placeholder, className, setPostList, pageState, commUrl } = props;\n  const [focus, setFocus] = useState(true);\n  const [pageValue, setPageValue] = useState(pageState);\n  const dispatch = useDispatch();\n  const inputValue = useSelector(state => state.inputValue);\n  const commInputValue = useSelector(state => state.commInputValue);\n  const tempCommInputValue = useSelector(state => state.tempCommInputValue);\n\n  function changeInput(e) {\n    if (pageValue === 'community') {\n      dispatch(setTempCommInputValue(e.target.value));\n    } else {\n      dispatch(setInputValue(e.target.value));\n    }\n  }\n\n  function searchInput() {\n    if (pageValue === 'community') {\n      const url = `${commUrl}&keyword=${commInputValue}`;\n      if (tempCommInputValue) {\n        dispatch(setSearchClickState(true));\n      } else {\n        dispatch(setSearchClickState(false));\n      }\n      axios\n        .get(url)\n        .then(response => {\n          dispatch(setCommInputValue(tempCommInputValue));\n          setPostList(response.data.data);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    } else {\n      const url = `${process.env.REACT_APP_API_URL}/api/kindergarten/name/${inputValue}`;\n      axios\n        .get(url)\n        .then(response => {\n          dispatch(setKinderGartens(response.data));\n          dispatch(setSearchValue(inputValue));\n          dispatch(setInputValue(''));\n          dispatch(setAreaFilter(0));\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }\n\n  function handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      searchInput();\n    }\n  }\n\n  return (\n    <div className={cls(className)}>\n      <div\n        className={\n          focus\n            ? 'search-input-outline border-black-070'\n            : 'search-input-outline border-yellow-500'\n        }\n      >\n        <input\n          type=\"text\"\n          className=\"search-input w-full\"\n          placeholder={placeholder}\n          onFocus={() => setFocus(false)}\n          onBlur={() => setFocus(true)}\n          onChange={e => changeInput(e)}\n          value={pageValue === 'community' ? tempCommInputValue : inputValue}\n          onKeyPress={handleKeyPress}\n        />\n        <button\n          type=\"button\"\n          className=\"search-input-btn\"\n          onFocus={() => setFocus(false)}\n          onBlur={() => setFocus(true)}\n        >\n          <Search onClick={() => searchInput()} />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default InputBtn;\n","/Users/jieun/Desktop/main-project/idle/src/components/dateCalculate.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/Pagination.jsx",["356"],[],"import PaginationCuston from 'react-js-pagination';\nimport { ReactComponent as ArrowNext } from '../images/arrow-next.svg';\nimport { ReactComponent as ArrowPrev } from '../images/arrow-prev.svg';\n\nfunction Pagination(props) {\n  const {\n    currentPage,\n    itemsCountPerPage,\n    onChange,\n    // pageRageDisplayed = 5,\n    count,\n  } = props;\n  return (\n    <div className=\"pagination gab-2 mt-50 flex justify-center p-16\">\n      <PaginationCuston\n        activePage={currentPage}\n        itemsCountPerPage={itemsCountPerPage}\n        totalItemsCount={count}\n        onChange={onChange}\n        pageRageDisplayed={5}\n        prevPageText={<ArrowPrev />}\n        nextPageText={<ArrowNext />}\n        lastPageText={\n          <div className=\"flex\">\n            <ArrowNext className=\"mr-[-6px]\" />\n            <ArrowNext className=\"mr-[-3px]\" />\n          </div>\n        }\n        firstPageText={\n          <div className=\"flex\">\n            <ArrowPrev className=\"mr-[-6px]\" />\n            <ArrowPrev className=\"mr-[2px]\" />\n          </div>\n        }\n      />\n    </div>\n  );\n}\n\nexport default Pagination;\n","/Users/jieun/Desktop/main-project/idle/src/pages/Modal.jsx",["357","358","359","360","361","362"],["363","364","365","366"],"import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { setAuth } from '../actions/areaFilterActions';\nimport RatingStar from '../components/RatingStar';\nimport TextArea from '../components/TextArea';\nimport UploadImage from '../components/UploadImage';\nimport Button from '../components/Button/Button';\nimport profile from '../images/profile.png';\nimport { ReactComponent as Star } from '../images/star-on.svg';\nimport { ReactComponent as StarOff } from '../images/star-off.svg';\nimport { ReactComponent as Close } from '../images/close.svg';\n\nfunction Modal(props) {\n  const {\n    onClick,\n    prevRatedReview,\n    prevText,\n    prevImage,\n    setPrevImage,\n    title,\n    reviewId,\n  } = props;\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [text, setText] = prevText ? useState(prevText) : useState('');\n  const [kinderInfo, setKinderInfo] = useState([]);\n  const dispatch = useDispatch();\n  const apiUrl = process.env.REACT_APP_API_URL;\n  const [starIndex, setStarIndex] = prevRatedReview\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useState(prevRatedReview)\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useState(0);\n  const [image, setImage] = useState(null);\n  const { id } = useParams();\n  const auth = useSelector(state => state.auth);\n  const navi = useNavigate();\n\n  const starScore = () => {\n    const ratedStar = Math.floor(kinderInfo.ratedReview);\n    const ratingStar = [];\n\n    for (let i = 1; i <= 5; i += 1) {\n      if (i <= ratedStar) {\n        ratingStar.push(<Star key={i} />);\n      } else {\n        ratingStar.push(<StarOff key={i} />);\n      }\n    }\n    return ratingStar.map(star => star);\n  };\n\n  const handleStarIndexChange = useCallback(\n    index => {\n      setStarIndex(index);\n    },\n    [setStarIndex],\n  );\n\n  const textCount = event => {\n    setText(event.target.value);\n  };\n\n  // replace\n  useEffect(() => {\n    axios\n      .get(`${apiUrl}/api/kindergarten/${id}`)\n      .then(response => {\n        setKinderInfo(response.data.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [apiUrl, id]);\n\n  const submitReview = () => {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '로그인을 먼저 해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      }).then(res => {\n        navi('/login');\n      });\n    } else {\n      if (!text || !starIndex) {\n        Swal.fire({\n          icon: 'error',\n          text: '내용과 별점을 입력해주세요❗️',\n          confirmButtonColor: '#FFD337',\n        });\n        return;\n      }\n\n      if (prevText) {\n        const formData = new FormData();\n\n        const data = {\n          content: text,\n          ratedReview: starIndex,\n        };\n\n        formData.append('image', image);\n\n        formData.append(\n          'patchDto',\n          new Blob([JSON.stringify(data)], { type: 'application/json' }),\n        );\n\n        axios\n          .patch(`${apiUrl}/api/review/${reviewId}`, formData, {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n              'Content-Type': 'multipart/form-data',\n            },\n          })\n          .then(response => {\n            window.location.reload();\n          })\n          .catch(error => {\n            if (error.response && error.response.status === 403) {\n              Swal.fire({\n                icon: 'error',\n                text: '본인이 작성한 후기만 수정할 수 있어요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n            } else if (error.response && error.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            }\n          });\n      } else {\n        const formData = new FormData();\n\n        const data = {\n          content: text,\n          ratedReview: starIndex,\n        };\n\n        formData.append('image', image);\n\n        formData.append(\n          'postDto',\n          new Blob([JSON.stringify(data)], { type: 'application/json' }),\n        );\n\n        axios\n          .post(`${apiUrl}/api/review/${id}`, formData, {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n              'Content-Type': 'multipart/form-data',\n            },\n          })\n          .then(response => {\n            window.location.reload();\n          })\n          .catch(error => {\n            if (error.response && error.response.status === 403) {\n              Swal.fire({\n                icon: 'error',\n                text: '본인이 작성한 후기만 수정할 수 있어요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n            } else if (error.response && error.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            }\n          });\n      }\n    }\n  };\n  return (\n    <>\n      <div className=\"flex justify-center\">\n        <div className=\"fixed top-[10px] z-[101] my-80 h-[calc(100vh-160px)] w-608 rounded-[16px] bg-white onlyMobile:top-0 onlyMobile:my-0 onlyMobile:h-full onlyMobile:w-full onlyMobile:rounded-0\">\n          <div className=\"relative flex h-full flex-col p-30\">\n            <div className=\" w-full shrink-0\">\n              {/* 후기 작성하기 */}\n              <div className=\"relative flex justify-center\">\n                <p className=\"write-title\">{title}</p>\n                <button\n                  type=\"button\"\n                  className=\"absolute right-0 top-[-4px]\"\n                  onClick={onClick}\n                >\n                  <Close />\n                </button>\n              </div>\n\n              {/* 유치원 정보 */}\n              <div className=\"mt-25 flex border-b-[1px] border-black-070 pb-25\">\n                <div className=\"user-profile mr-15 h-116 w-116 onlyMobile:h-96 onlyMobile:w-96\">\n                  {console.log(kinderInfo)}\n                  {kinderInfo.imageUrl ? (\n                    <img src={kinderInfo.imageUrl} alt=\"img\" />\n                  ) : (\n                    <img src={profile} alt=\"defaultImage\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <p className=\"write-title\">\n                    {kinderInfo.name &&\n                      kinderInfo.name.slice().replace(/\"/g, '')}\n                  </p>\n                  <p className=\"flex items-center text-14\">\n                    <Star /> {kinderInfo?.ratedReviewsAvg?.toFixed(2)} (\n                    {kinderInfo.ratedReviewsCount})\n                  </p>\n                  <p className=\"mt-6 text-14\">\n                    {kinderInfo.locations &&\n                      kinderInfo.locations.slice().replace(/\"/g, '')}\n                  </p>\n                </div>\n              </div>\n            </div>\n            {/* 별점 */}\n            <div className=\"mb-30 overflow-y-scroll\">\n              <div className=\"mt-25 flex items-center border-b-[1px] border-black-070 pb-25\">\n                <p className=\"write-title mr-15\">유치원은 어떠셨나요?</p>\n                <RatingStar\n                  handleStarIndexChange={handleStarIndexChange}\n                  prevRatedReview={prevRatedReview}\n                />\n              </div>\n              {/* 후기 */}\n              <div className=\"mt-25 flex flex-col border-b-[1px] border-black-070 pb-25\">\n                <p className=\"write-title mb-15 mr-15\">\n                  솔직한 후기를 남겨주세요.\n                </p>\n                <TextArea\n                  areaClass=\"h-135 py-20 \"\n                  value={text}\n                  onChange={textCount}\n                  maxLength=\"200\"\n                  placeholder=\"후기를 남겨주세요.\"\n                  className=\"flex flex-col items-end p-15\"\n                  textClass=\"h-80\"\n                  defaultValue={prevText}\n                />\n              </div>\n              {/* 사진등록 */}\n              <div className=\"mt-25 flex flex-col pb-25\">\n                <p className=\"write-title mb-15 mr-15\">사진을 등록해주세요.</p>\n                <div className=\"flex\">\n                  <UploadImage\n                    image={image}\n                    setImage={setImage}\n                    prevImage={prevImage}\n                    setPrevImage={setPrevImage}\n                  />\n                </div>\n              </div>\n              {/* 수정 삭제 */}\n            </div>\n            {/* 버튼 */}\n            <Button\n              onClick={submitReview}\n              className=\"color-yellow btn-size-l absolute bottom-[30px] w-[calc(100%-60px)]\"\n            >\n              후기 등록하기\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"fixed left-0 top-0 z-[100] h-[100vh] w-[100vw] bg-[rgba(0,0,0,0.7)] onlyMobile:hidden\" />\n    </>\n  );\n}\nexport default Modal;\n","/Users/jieun/Desktop/main-project/idle/src/components/DropDownMenu.jsx",["367","368","369","370","371"],["372"],"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setCurProfile,\n  setAuth,\n  setActiveIndex,\n  setUser,\n} from '../actions/areaFilterActions';\nimport Profile from '../images/profile.png';\n\nfunction DropDownMenu({ setDropDown }) {\n  const dispatch = useDispatch();\n\n  const user = useSelector(state => state.user);\n  const curProfile = useSelector(state => state.curProfile);\n  const activeIndex = useSelector(state => state.activeIndex);\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: localStorage.getItem('token'),\n        },\n      })\n      .then(res => {\n        dispatch(setUser(res.data));\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleLogout = () => {\n    dispatch(setAuth(false));\n    localStorage.removeItem('token');\n    dispatch(setUser([]));\n    dispatch(setCurProfile({}));\n    dispatch(setActiveIndex(''));\n  };\n\n  function clickedProfile(profileId) {\n    axios\n      .post(\n        `${process.env.REACT_APP_API_URL}/api/users/profile/${profileId}`,\n        {},\n        {\n          headers: {\n            Authorization: localStorage.getItem('token'),\n          },\n        },\n      )\n      .then(() => {\n        axios\n          .get(\n            `${process.env.REACT_APP_API_URL}/api/users/profile/currentProfile`,\n            {\n              headers: {\n                Authorization: localStorage.getItem('token'),\n              },\n            },\n          )\n          .then(res => {\n            dispatch(setCurProfile(res.data.data));\n            setDropDown(false);\n            dispatch(setActiveIndex(res.data.data.profileId));\n          })\n          .catch(err => {});\n      })\n      .catch(err => {\n        if (err.response && err.response.status === 401) {\n          Swal.fire({\n            icon: 'error',\n            text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n            confirmButtonColor: '#FFD337',\n          });\n          dispatch(setAuth(false));\n          localStorage.removeItem('token');\n        }\n      });\n  }\n\n  // function profileActive(e) {\n  //   const classList = e.target.className.split(' ');\n  //   const indexClass = classList.find(className =>\n  //     className.startsWith('profile'),\n  //   );\n  //   if (indexClass) {\n  //     const index = parseInt(indexClass.slice(-1), 10);\n  //     dispatch(setActiveIndex(index));\n  //   }\n  // }\n\n  const RenderProfile = () => {\n    return user.map(profile => {\n      const activeClass = profile.profileId === activeIndex ? 'font-bold' : '';\n\n      return (\n        <li\n          className={`profile flex items-center justify-start${profile.profileId} cursor-pointer px-8 py-12 text-14 ${activeClass} rounded-lg hover:bg-black-025`}\n          onClick={e => {\n            clickedProfile(profile.profileId);\n          }}\n          role=\"presentation\"\n          key={profile.profileId}\n        >\n          <div className=\"flex w-full justify-between\">\n            <div className=\"flex\">\n              {profile.profileId === activeIndex && (\n                <div className=\"user-profile mr-10 inline-block h-24 w-24 rounded-md\">\n                  <img src={profile.imageUrl || Profile} alt=\"profileimage\" />\n                </div>\n              )}\n              {profile.name}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  };\n\n  return (\n    <div className=\"absolute left-0 top-[64px] z-10 flex w-226 flex-col items-start justify-center rounded-[10px] bg-white px-12 py-16 shadow-dropDownShadow onlyMobile:w-[100%]\">\n      <ul className=\"profile w-202 py-2 text-left onlyMobile:w-[100%]\">\n        <li className=\"px-8 pb-8 text-12 text-black-350\">프로필</li>\n        <RenderProfile />\n        <div className=\"mt-2 h-1 border-b\" />\n      </ul>\n      <ul className=\"w-202 text-left onlyMobile:w-[100%]\">\n        <Link\n          to={`/mypage/${curProfile.profileId}`}\n          onClick={() => setDropDown(false)}\n        >\n          <li className=\"flex cursor-pointer items-center justify-start rounded-md px-8 py-12 text-14 hover:bg-black-025\">\n            마이페이지\n          </li>\n        </Link>\n        <Link to=\"/\">\n          <li\n            role=\"presentation\"\n            className=\"cursor-pointer items-center justify-start rounded-md px-8 py-12 text-14 hover:bg-black-025\"\n            onClick={() => handleLogout()}\n          >\n            로그아웃\n          </li>\n        </Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default DropDownMenu;\n","/Users/jieun/Desktop/main-project/idle/src/components/Comment.jsx",["373","374","375","376","377","378","379","380"],[],"import { useState } from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setAuth } from '../actions/areaFilterActions';\nimport { ReactComponent as More } from '../images/more.svg';\nimport Dog from '../images/dog.jpeg';\nimport Input from './Input/Input';\nimport Button from './Button/Button';\n\nfunction Comment({\n  commentId,\n  name,\n  email,\n  text,\n  modifiedAt,\n  postId,\n  modified,\n  profileImg,\n}) {\n  const [moreSelect, setMoreSelect] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editedText, setEditedText] = useState(text);\n  const [onDelete, setOnDelete] = useState(false);\n  const [commentError, setCommentError] = useState('');\n  const auth = useSelector(state => state.auth);\n  const navi = useNavigate();\n\n  const dispatch = useDispatch();\n\n  const onDeleteModal = () => {\n    setOnDelete(true);\n  };\n\n  const handleEditClick = () => {\n    setIsEditMode(true);\n    setMoreSelect(!moreSelect);\n  };\n\n  const handleSaveClick = postId => {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '로그인을 먼저 해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      }).then(res => {\n        navi('/login');\n      });\n    }\n    if (text.length !== 0) {\n      setEditedText(text);\n      setIsEditMode(false);\n\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/post/${postId}/comment/${commentId}`,\n          {\n            postId,\n            commenetId: commentId,\n            content: editedText,\n          },\n          {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          },\n        )\n        .then(response => {\n          window.location.reload();\n        })\n        .catch(error => {\n          if (error.response && error.response.status === 403) {\n            Swal.fire({\n              icon: 'error',\n              text: '본인이 작성한 댓글만 수정할 수 있어요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n          } else if (error.response && error.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n          }\n        });\n    } else {\n      setCommentError('댓글 내용을 입력헤주세요.');\n    }\n\n    // const now = new Date();\n    // const dateString = now.toLocaleString();\n  };\n\n  const handleChange = e => {\n    setEditedText(e.target.value);\n    if (e.target.value.length !== 0) {\n      setCommentError('');\n    } else {\n      setCommentError('댓글 내용을 입력해주세요.');\n    }\n  };\n\n  const handleClick = () => {\n    setMoreSelect(!moreSelect);\n  };\n\n  function deleteComment(commentId) {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '로그인을 먼저 해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      }).then(res => {\n        navi('/login');\n      });\n    } else {\n      Swal.fire({\n        // title: '댓글을 삭제하시겠습니까?',\n        text: '댓글을 삭제하시겠습니까?',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#FFD337',\n        cancelButtonColor: '#ffffff',\n        confirmButtonText: '네',\n        cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n      }).then(result => {\n        if (result.isConfirmed) {\n          axios\n            .delete(\n              `${process.env.REACT_APP_API_URL}/api/post/${postId}/comment/${commentId}`,\n              {\n                headers: {\n                  Authorization: localStorage.getItem('token'),\n                },\n              },\n            )\n            .then(response => {\n              if (result) {\n                Swal.fire({\n                  confirmButtonColor: '#FFD337',\n                  text: '댓글이 삭제되었습니다.',\n                }).then(result => {\n                  window.location.reload();\n                });\n              }\n            })\n            .catch(error => {\n              if (error.response && error.response.status === 403) {\n                setMoreSelect(!moreSelect);\n                Swal.fire({\n                  icon: 'error',\n                  text: '본인이 작성한 댓글만 삭제할 수 있어요❗️',\n                  confirmButtonColor: '#FFD337',\n                });\n              } else if (error.response && error.response.status === 401) {\n                Swal.fire({\n                  icon: 'error',\n                  text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                  confirmButtonColor: '#FFD337',\n                });\n                dispatch(setAuth(false));\n                localStorage.removeItem('token');\n              }\n            });\n        }\n      });\n    }\n  }\n\n  return (\n    <div className=\"pb-32\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <div className=\"user-profile h-32 w-32 onlyMobile:h-24 onlyMobile:w-24\">\n            <img src={profileImg} alt=\"임시이미지\" />\n          </div>\n          <span className=\"px-8 text-14\">{name}</span>\n          <span className=\"text-14 text-black-350 onlyMobile:text-12\">\n            {email}\n          </span>\n        </div>\n        <div className=\"relative\">\n          <button type=\"button\">\n            <More width=\"16\" height=\"16\" onClick={handleClick} />\n          </button>\n          {moreSelect ? (\n            <ul className=\"absolute right-[-25px] flex w-80 flex-col items-center justify-center rounded-[10px] bg-white p-10 shadow-dropDownShadow\">\n              <li\n                onClick={() => handleEditClick()}\n                role=\"presentation\"\n                className=\" flex w-full cursor-pointer items-center justify-center rounded-md px-8 py-10 text-14 hover:bg-black-025 onlyMobile:text-12\"\n              >\n                수정\n              </li>\n              <li\n                onClick={() => deleteComment(commentId)}\n                role=\"presentation\"\n                className=\"flex w-full cursor-pointer items-center justify-center rounded-md px-8 py-10 text-14 hover:bg-black-025 onlyMobile:text-12\"\n              >\n                삭제\n              </li>\n            </ul>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n      {isEditMode ? (\n        <div className=\"flex flex-row items-start\">\n          <Input\n            type=\"text\"\n            value={editedText}\n            isError={commentError}\n            onChange={e => handleChange(e)}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                handleSaveClick(postId);\n              }\n            }}\n            className=\"mt-5 w-[100%] text-16 text-black-900 onlyMobile:text-12\"\n          />\n          <Button\n            className=\"btn-size-l color-yellow ml-8 mt-5 shrink-0\"\n            onClick={() => handleSaveClick(postId)}\n          >\n            수정\n          </Button>\n        </div>\n      ) : (\n        <p className=\"mb-10 mt-5 text-16 text-black-900 onlyMobile:text-12\">\n          {text}\n          {modified ? (\n            <div className=\"ml-10 inline-block text-12 text-black-350\">\n              (수정됨)\n            </div>\n          ) : null}\n        </p>\n      )}\n      <p className=\"mt-10 text-14 text-black-350 onlyMobile:text-12\">\n        {/* {new Date(modifiedAt).toLocaleString()} */}\n        {new Date(\n          new Date(modifiedAt).getTime() + 9 * 60 * 60 * 1000,\n        ).toLocaleString()}\n      </p>\n    </div>\n  );\n}\nexport default Comment;\n","/Users/jieun/Desktop/main-project/idle/src/components/Button/Button.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/Card/MapCard.jsx",["381","382","383"],[],"import { useMediaQuery } from 'react-responsive';\nimport { Link } from 'react-router-dom';\nimport Dog from '../../images/dog.jpeg';\nimport { ReactComponent as StarOn } from '../../images/star-on.svg';\n\nfunction MapCard(props) {\n  const { name, ratedReviewsAvg, ratedReviewsCount, id, imageUrl } = props;\n\n  return (\n    <Link to={`/kindergarten/${id}`}>\n      <div className=\"onlyMini:flex-center relative  mt-6 w-302 rounded-2xl onlyMobile:mt-[-2px] onlyMobile:h-205 onlyMobile:w-220 onlyMini:w-150 onlyMini:flex-col\">\n        <div className=\"user-profile h-200 w-full onlyMobile:h-140 onlyMini:w-150\">\n          <img src={imageUrl} alt=\"dog\" />\n        </div>\n        <div className=\"justifty-center flex w-full flex-col items-start px-8 py-16 onlyMobile:pb-0\">\n          <div className=\"mb-4 text-left text-18 font-bold onlyMobile:text-14\">\n            {name.replace(/\"/g, '')}\n          </div>\n          <div className=\"flex-center text-14 onlyMobile:text-12\">\n            <StarOn className=\"mr-4 inline-block\" />\n            <span className=\"mr-4\">{ratedReviewsAvg.toFixed(2)}</span>(\n            {ratedReviewsCount})\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default MapCard;\n","/Users/jieun/Desktop/main-project/idle/src/components/Card/MainCard.jsx",["384"],[],"import { Link } from 'react-router-dom';\nimport { ReactComponent as StarOn } from '../../images/star-on.svg';\n\nfunction MainCard(props) {\n  const { name, ratedReviewsAvg, ratedReviewsCount, locations, id, imageUrl } =\n    props;\n  return (\n    <Link to={`/kindergarten/${id}`}>\n      <div className=\"mb-40 onlyMobile:w-[100%]\">\n        <div className=\"user-profile mb-20 h-248 w-full\">\n          <img className=\"h-full w-full rounded-2xl\" src={imageUrl} alt=\"dog\" />\n        </div>\n        <div className=\"justifty-center flex w-full flex-col items-start px-8 py-0\">\n          <div className=\"text-18 font-bold onlyMobile:text-16\">\n            {name.replace(/\"/g, '')}\n          </div>\n          <div className=\"flex-center mb-8 text-14 onlyMobile:mb-4 onlyMobile:text-12\">\n            <StarOn className=\"mr-4 inline-block\" />\n            <span className=\"mr-4\">{ratedReviewsAvg.toFixed(2)}</span>(\n            {ratedReviewsCount})\n          </div>\n          <div className=\"w-full overflow-hidden text-ellipsis whitespace-nowrap text-14\">\n            {locations.replace(/\"/g, '')}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default MainCard;\n","/Users/jieun/Desktop/main-project/idle/src/components/Input/InputSelectBox.jsx",["385","386","387","388"],["389"],"import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setAreaFilter, setSearchValue } from '../../actions/areaFilterActions';\nimport cls from '../../utils/tailwind';\nimport { ReactComponent as ArrowOpen } from '../../images/arrow-open.svg';\nimport { ReactComponent as ArrowClose } from '../../images/arrow-close.svg';\n\nfunction InputSelectBox(props) {\n  const { options, placeholder, className, width } = props;\n  // options: 셀렉트박스 펼칠 때 나오는 옵션 리스트. <InputSelectBox options=\"a,b,c\" />형태로 입력\n  // className: button에 추가\n  // width: <InputSelectBox width=\"w-500\" /> 형태로 입력\n  const profiles = options.split(',');\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [selectUser, setSelectUser] = useState(placeholder);\n  const [focus, setFocus] = useState(false);\n  const areaFilter = useSelector(state => state.areaFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (typeof areaFilter === 'number') {\n      setSelectUser(profiles[areaFilter]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [areaFilter]);\n\n  const profileActive = event => {\n    const index = Number(event.target.className.split(' ')[1].slice(-1));\n    setActiveIndex(index);\n    setSelectUser(profiles[index]);\n    dispatch(setAreaFilter(index));\n    setFocus(false);\n    dispatch(setSearchValue(''));\n  };\n\n  const handleButtonClick = () => {\n    setFocus(!focus);\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={handleButtonClick}\n        type=\"button\"\n        className={cls('input-default input-select-default ', className, width)}\n      >\n        {selectUser}\n        {focus ? <ArrowClose /> : <ArrowOpen />}\n      </button>\n      {focus && (\n        <div\n          className={cls(\n            'absolute left-0 top-[58px] z-50 flex flex-col items-start justify-center rounded-[10px] bg-white shadow-dropDownShadow',\n            width,\n          )}\n        >\n          <ul className=\"ul profile w-full px-8 py-12 text-left\">\n            {profiles.map((profile, idx) => {\n              const activeClass = activeIndex === idx ? 'font-bold' : '';\n\n              return (\n                <li\n                  className={`li profile${idx} w-full cursor-pointer p-12 text-14 ${activeClass} rounded-lg hover:bg-black-025`}\n                  onClick={profileActive}\n                  role=\"presentation\"\n                >\n                  {profile}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default InputSelectBox;\n","/Users/jieun/Desktop/main-project/idle/src/components/Input/Input.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/TextArea.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/utils/util.js",["390","391","392"],[],"import axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport Button from '../components/Button/Button';\n\nimport Profile from '../images/profile.png';\n\n// 성공 시 then 은 각 파일에서 추가로 작성하기\nexport const axiosGet = url => {\n  return axios\n    .get(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: localStorage.getItem('token'),\n      },\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const axiosPost = (url, data) => {\n  return axios\n    .post(url, data, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: localStorage.getItem('token'),\n      },\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport function RenderProfile({ profileActive, clickedProfile, handleDelete }) {\n  const user = useSelector(state => state.user);\n  const activeIndex = useSelector(state => state.activeIndex);\n\n  const renderProfile = () => {\n    return user.map((profile, idx) => {\n      const activeClass = Number(activeIndex) === idx ? 'font-bold' : '';\n      const shouldDisplayButton = Number(activeIndex) !== idx;\n      // const selectedClass = selectProfile === idx ? 'font-bold' : '';\n      return (\n        <li className=\"flex w-full\" key={profile.profileId}>\n          <div\n            className={`profile flex items-center justify-start${idx} cursor-pointer px-8 py-12 text-14 ${activeClass} w-full rounded-lg hover:bg-black-025`}\n            onClick={e => {\n              profileActive(e);\n              clickedProfile(idx, profile.profileId);\n            }}\n            role=\"presentation\"\n          >\n            <div className=\"flex w-full\">\n              {Number(activeIndex) === idx && (\n                <div className=\"user-profile mr-10 inline-block h-24 w-24 rounded-md\">\n                  <img src={profile.imageUrl || Profile} alt=\"profileimage\" />\n                </div>\n              )}\n              {profile.name}\n            </div>\n          </div>\n          {shouldDisplayButton && user.length > 1 && (\n            <Button\n              className=\"btn-text-default w-40 text-red-400 onlyMobile:text-12\"\n              onClick={() => handleDelete(idx, profile.profileId)}\n            >\n              삭제\n            </Button>\n          )}\n        </li>\n      );\n    });\n  };\n\n  return <>{renderProfile()}</>;\n}\n","/Users/jieun/Desktop/main-project/idle/src/pages/SettingModal.jsx",["393","394","395","396"],[],"import { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport axios, { HttpStatusCode } from 'axios';\nimport {\n  setCurProfile,\n  setAuth,\n  setActiveIndex,\n  setUser,\n} from '../actions/areaFilterActions';\n\nimport Input from '../components/Input/Input';\nimport Button from '../components/Button/Button';\nimport Toast from '../utils/toast';\n\nimport { ReactComponent as Close } from '../images/close.svg';\n\nfunction SettingModal({ onClick, setSettingModal }) {\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n\n  const curProfile = useSelector(state => state.curProfile);\n\n  const [value, setValue] = useState({\n    curPassword: '',\n    password1: '',\n    password2: '',\n  });\n\n  // 오류메시지\n  const [curPwdErr, setCurPwdErr] = useState('');\n  const [newPwdErr, setNewPwdErr] = useState('');\n  const [confirmPwdErr, setConfirmPwdErr] = useState('');\n\n  // 유효성검사\n  const [isCurPwd, setIsCurPwd] = useState(false);\n  const [isNewPwd, setIsNewPwd] = useState(false);\n  const [isConfirmPwd, setIsConfirmPwd] = useState(false);\n\n  const handleChangePwd = () => {\n    if (!value.curPassword) {\n      setCurPwdErr('현재 비밀번호를 입력해주세요.');\n      setIsCurPwd(false);\n    } else if (value.curPassword) {\n      setCurPwdErr('');\n      setIsCurPwd(false);\n    }\n\n    if (!value.password1) {\n      setNewPwdErr('새 비밀번호를 입력해주세요.');\n      setIsNewPwd(false);\n    }\n    if (!value.password2) {\n      setConfirmPwdErr('새 비밀번호를 다시 입력해주세요.');\n      setIsConfirmPwd(false);\n    }\n\n    if (isNewPwd && isConfirmPwd) {\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/users`,\n          {\n            curPassword: value.curPassword,\n            password1: value.password1,\n            password2: value.password2,\n          },\n          {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          },\n        )\n        .then(res => {\n          setCurPwdErr('');\n          setNewPwdErr('');\n          setIsConfirmPwd('');\n          setSettingModal(false);\n          Toast.fire({\n            title: '비밀번호 변경이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n        })\n        .catch(err => {\n          if (err.response?.status === 400) {\n            setCurPwdErr(\n              '새 비밀번호와 새 비밀번호 확인 영역이 일치하지 않습니다.',\n            );\n          } else if (err.response?.status === 405) {\n            setCurPwdErr('현재 비밀번호와 일치하지 않습니다.');\n          } else if (err.response?.status === 403) {\n            setCurPwdErr('간편 회원가입 유저는 비밀번호 수정이 불가능합니다.');\n          } else if (err.response?.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 후 시도해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n            navi('/login');\n          }\n          setSettingModal(true);\n        });\n    }\n  };\n\n  // 로그아웃 함수\n  const handleLogout = () => {\n    dispatch(setAuth(false));\n    localStorage.removeItem('token');\n    dispatch(setUser([]));\n    dispatch(setCurProfile({}));\n    dispatch(setActiveIndex(''));\n    navi('/');\n  };\n\n  // 회원탈퇴\n  const handleUserDelete = () => {\n    Swal.fire({\n      text: '탈퇴하시는 경우 동일한 이메일로 회원가입이 불가능합니다. 계정 탈퇴를 진행하시겠습니까?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#FFD337',\n      cancelButtonColor: '#ffffff',\n      confirmButtonText: '네',\n      cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n    }).then(result => {\n      if (result.isConfirmed) {\n        axios\n          .delete(`${process.env.REACT_APP_API_URL}/api/users`, {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          })\n          .then(res => {\n            handleLogout();\n            setCurPwdErr('');\n            setCurPwdErr('');\n            setCurPwdErr('');\n            setSettingModal(false);\n          })\n          .catch(err => {\n            if (err.response && err.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 후 시도해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n              navi('/login');\n            }\n          });\n      }\n    });\n  };\n\n  const onCheckCurPwd = useCallback(\n    e => {\n      const CurrentPwd = e.target.value;\n      setValue({ ...value, curPassword: CurrentPwd });\n\n      if (!CurrentPwd) {\n        setCurPwdErr('현재 비밀번호를 입력해주세요.');\n        setIsCurPwd(false);\n      }\n    },\n    [value],\n  );\n\n  const onCheckNewPwd = useCallback(\n    e => {\n      const valiPwd = /^[^\\s]{8,15}$/;\n      const NewPwd = e.target.value;\n      setValue({ ...value, password1: NewPwd });\n\n      if (!NewPwd) {\n        setNewPwdErr('비밀번호를 입력해주세요.');\n        setIsNewPwd(false);\n      } else if (!valiPwd.test(NewPwd)) {\n        setNewPwdErr('8~15자의 비밀번호를 입력해주세요.');\n        setIsNewPwd(false);\n      } else {\n        setNewPwdErr('');\n        setIsNewPwd(true);\n      }\n    },\n    [value],\n  );\n\n  const onCheckConfirmPwd = useCallback(\n    e => {\n      const CurrentConfirmPwd = e.target.value;\n      setValue({ ...value, password2: CurrentConfirmPwd });\n\n      if (value.password1 === CurrentConfirmPwd) {\n        setConfirmPwdErr('');\n        setIsConfirmPwd(true);\n      } else {\n        setConfirmPwdErr('비밀번호를 다시 확인해주세요.');\n        setIsConfirmPwd(false);\n      }\n    },\n    [value],\n  );\n\n  return (\n    <>\n      <div className=\"flex justify-center\">\n        <div className=\"fixed top-[10px] z-[101] my-80 h-[calc(100vh-160px)] w-608 rounded-[16px] bg-white onlyMobile:top-0 onlyMobile:my-0 onlyMobile:h-full onlyMobile:w-full onlyMobile:rounded-0\">\n          <div className=\"relative flex h-full flex-col p-30\">\n            <div className=\" w-full shrink-0\">\n              <div className=\"relative flex justify-center\">\n                <p className=\"write-title\">계정 설정</p>\n                <button\n                  type=\"button\"\n                  className=\"absolute right-0 top-[-4px]\"\n                  onClick={onClick}\n                >\n                  <Close />\n                </button>\n              </div>\n            </div>\n\n            {/* 비밀번호 변경 */}\n            {/* {curProfile?.socialType !== null ? (\n\n            ) : (\n\n            )} */}\n            <div className=\"mb-30 overflow-y-scroll\">\n              <div className=\"mt-25 flex flex-col border-b-[1px] border-black-070 pb-25\">\n                <p className=\"write-title mb-15 mr-15\">비밀번호 변경</p>\n                <form onSubmit={e => e.preventDefault()}>\n                  <div className=\"mb-24\">\n                    {/* {curProfile?.socialType !== null ? (\n                      <Input\n                        labelText=\"현재 비밀번호\"\n                        placeholder=\"비밀번호를 입력해주세요.\"\n                        type=\"password\"\n                        onChange={onCheckCurPwd}\n                        isError={curPwdErr}\n                        disabled=\"간편 가입은 비밀번호 변경이 불가능합니다.\"\n                      />\n                    ) : (\n                      <Input\n                        labelText=\"현재 비밀번호\"\n                        placeholder=\"비밀번호를 입력해주세요.\"\n                        type=\"password\"\n                        onChange={onCheckCurPwd}\n                        isError={curPwdErr}\n                        // {curProfile?.socialType !== null ? (disabled=\"간편 가입은 비밀번호 변경이 불가능합니다.\") : ''}\n                      />\n                    )} */}\n                    <Input\n                      labelText=\"현재 비밀번호\"\n                      placeholder=\"비밀번호를 입력해주세요.\"\n                      type=\"password\"\n                      onChange={onCheckCurPwd}\n                      isError={curPwdErr}\n                      disabled={\n                        curProfile?.socialType !== null &&\n                        '간편 가입은 비밀번호 변경이 불가능합니다.'\n                      }\n                    />\n                  </div>\n                  <div className=\"mb-24\">\n                    <Input\n                      labelText=\"새 비밀번호\"\n                      placeholder=\"새 비밀번호를 입력해주세요.\"\n                      type=\"password\"\n                      onChange={onCheckNewPwd}\n                      isError={newPwdErr}\n                      disabled={\n                        curProfile?.socialType !== null &&\n                        '간편 가입은 비밀번호 변경이 불가능합니다.'\n                      }\n                    />\n                  </div>\n                  <div className=\"mb-24\">\n                    <Input\n                      labelText=\"새 비밀번호 확인\"\n                      placeholder=\"비밀번호를 다시 입력해주세요.\"\n                      type=\"password\"\n                      onChange={onCheckConfirmPwd}\n                      isError={confirmPwdErr}\n                      disabled={\n                        curProfile?.socialType !== null &&\n                        '간편 가입은 비밀번호 변경이 불가능합니다.'\n                      }\n                    />\n                  </div>\n                  <Button\n                    className=\"color-yellow btn-size-l mt-16 w-full\"\n                    onClick={handleChangePwd}\n                    disabled={curProfile?.socialType !== null}\n                  >\n                    비밀번호 변경\n                  </Button>\n                </form>\n              </div>\n\n              {/* 회원탈퇴 */}\n              <div className=\"mt-25 flex flex-col  pb-25\">\n                <Button\n                  className=\"btn-text-default text-black-350\"\n                  onClick={handleUserDelete}\n                >\n                  회원탈퇴하기\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"fixed left-0 top-0 z-[100] h-[100vh] w-[100vw] bg-[rgba(0,0,0,0.7)] onlyMobile:hidden\" />\n    </>\n  );\n}\nexport default SettingModal;\n","/Users/jieun/Desktop/main-project/idle/src/pages/ProfileCreateModal.jsx",["397","398","399","400","401","402","403","404","405"],[],"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport { useDispatch } from 'react-redux';\nimport { setUser, setAuth } from '../actions/areaFilterActions';\n\nimport UploadImage from '../components/UploadImage';\nimport Button from '../components/Button/Button';\nimport RadioGroup from '../components/Radio/RadioGroup';\nimport Radio from '../components/Radio/Radio';\nimport Input from '../components/Input/Input';\nimport Toast from '../utils/toast';\nimport { ReactComponent as ArrowOpen } from '../images/arrow-open.svg';\nimport { ReactComponent as ArrowClose } from '../images/arrow-close.svg';\nimport { ReactComponent as Close } from '../images/close.svg';\n\nfunction ProfileCreateModal({ onClick, setProfileModal }) {\n  const dispatch = useDispatch();\n  const navi = useNavigate();\n\n  const [nickname, setNickname] = useState('');\n  const [person, setPerson] = useState(true);\n  const [breed, setBreed] = useState(null);\n  const [image, setImage] = useState('');\n\n  // 오류 메시지\n  const [nicknameErr, setNicknameErr] = useState('');\n  const [selectErr, setSelectErr] = useState('');\n\n  // select box\n  const breedType =\n    '믹스견, 말티즈, 푸들, 포메라니안, 비숑, 웰시코기, 치와와, 폼피츠, 시츄, 골든리트리버, 시바, 진돗개, 닥스훈트, 달마시안, 도베르만, 말티푸, 보더콜리, 불독, 비글, 사모예드, 슈나우져, 스피치, 요크셔테리어';\n  const breedArr = breedType.split(', ');\n  const [activeIndex, setActiveIndex] = useState(null);\n  const [selectType, setSelectType] = useState('견종을 선택해주세요.');\n  const [focus, setFocus] = useState(false);\n\n  const typeActive = index => {\n    setActiveIndex(index);\n    setSelectType(breedArr[index]);\n    setFocus(false);\n    setBreed(String(breedArr[index]));\n  };\n\n  const getUsers = () => {\n    if (localStorage.getItem('token')) {\n      axios\n        .get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n          headers: {\n            Authorization: localStorage.getItem('token'),\n          },\n        })\n        .then(res => {\n          dispatch(setUser(res.data));\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n  };\n\n  const handleTypeClick = () => {\n    setFocus(!focus);\n  };\n\n  const handleChange = e => {\n    setNickname(e.target.value.trim());\n  };\n\n  const handleCheckPerson = isPerson => {\n    setPerson(isPerson);\n    setNicknameErr('');\n    setSelectErr('');\n    setNickname('');\n    setBreed(null);\n    setSelectType('견종을 선택해주세요.');\n  };\n\n  const handlePostProfile = () => {\n    if (!nickname || !breed) {\n      setNicknameErr(!nickname ? '닉네임을 입력해주세요.' : '');\n      setSelectErr(!breed ? '견종을 선택해주세요.' : '');\n    }\n    const selectedBreed = person ? null : breed;\n\n    const formData = new FormData();\n    const data = {\n      name: nickname,\n      checkPerson: person,\n      breed: selectedBreed,\n    };\n    formData.append('image', image);\n    formData.append(\n      'postDto',\n      new Blob([JSON.stringify(data)], { type: 'application/json' }),\n    );\n\n    if (person && nickname) {\n      axios\n        .post(`${process.env.REACT_APP_API_URL}/api/users/profile`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: localStorage.getItem('token'),\n          },\n        })\n        .then(res => {\n          getUsers();\n          setNicknameErr('');\n          setSelectErr('');\n          setProfileModal(false);\n          Toast.fire({\n            title: '프로필 생성이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n        })\n        .catch(err => {\n          if (err.response?.status === 401) {\n            Swal.fire({\n              toast: true,\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n            navi('/login');\n          } else {\n            Toast.fire({\n              title: '프로필 생성을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n            setProfileModal(true);\n          }\n        });\n    } else if (!person && nickname && breed) {\n      axios\n        .post(`${process.env.REACT_APP_API_URL}/api/users/profile`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: localStorage.getItem('token'),\n          },\n        })\n        .then(res => {\n          getUsers();\n          setNicknameErr('');\n          setSelectErr('');\n          setProfileModal(false);\n          Toast.fire({\n            title: '프로필 생성이 완료되었습니다.',\n            background: '#25B865',\n            color: 'white',\n          });\n        })\n        .catch(err => {\n          if (err.response && err.response.status === 401) {\n            Swal.fire({\n              icon: 'error',\n              text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n              confirmButtonColor: '#FFD337',\n            });\n            dispatch(setAuth(false));\n            localStorage.removeItem('token');\n            navi('/login');\n          } else {\n            Toast.fire({\n              title: '프로필 생성을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n            setProfileModal(true);\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"flex justify-center\">\n        <div className=\"fixed top-[10px] z-40 my-80 h-[calc(100vh-160px)] w-608 rounded-[16px] bg-white onlyMobile:top-0 onlyMobile:my-0 onlyMobile:h-full onlyMobile:w-full onlyMobile:rounded-0\">\n          <div className=\"relative flex h-full flex-col p-30\">\n            <div className=\" w-full shrink-0\">\n              <div className=\"relative flex justify-center\">\n                <p className=\"write-title\">프로필 추가하기</p>\n                <button\n                  type=\"button\"\n                  className=\"absolute right-0 top-[-4px]\"\n                  onClick={onClick}\n                >\n                  <Close />\n                </button>\n              </div>\n            </div>\n            {/* 프로필 종류 */}\n            <div className=\"mb-30 h-full overflow-y-scroll\">\n              <div className=\"mt-25 flex items-center border-b-[1px] border-black-070\">\n                <div className=\"mb-24 flex flex-col\">\n                  <p className=\"write-title mb-16 mr-16\">프로필 종류</p>\n                  <RadioGroup>\n                    <Radio\n                      id=\"1\"\n                      name=\"contact\"\n                      onClick={() => handleCheckPerson(true)}\n                      defaultChecked\n                    >\n                      견주님 프로필\n                    </Radio>\n                    <Radio\n                      id=\"2\"\n                      name=\"contact\"\n                      onClick={() => handleCheckPerson(false)}\n                    >\n                      강아지 프로필\n                    </Radio>\n                  </RadioGroup>\n                </div>\n              </div>\n              {/* 프로필 사진 등록 */}\n              <div className=\"mt-25 flex flex-col border-b-[1px] border-black-070 pb-24\">\n                <p className=\"write-title mb-15 mr-15\">프로필 사진 등록</p>\n                <UploadImage setImage={setImage} image={image} />\n              </div>\n              {/* 닉네임 등록 */}\n              <div className=\"mt-25 flex flex-col border-b-[1px] border-black-070 pb-24\">\n                <p className=\"write-title mb-16 mr-16\">닉네임 (필수)</p>\n                <div className=\"flex\">\n                  <Input\n                    placeholder=\"닉네임을 입력해주세요.\"\n                    // value={nickname}\n                    onChange={handleChange}\n                    isError={nicknameErr}\n                    value={nickname}\n                  />\n                </div>\n              </div>\n              {/* 견종 선택 */}\n              {!person && (\n                <div className=\"mt-25 flex flex-col pb-24\">\n                  <p className=\"write-title mb-16 mr-16\">견종 선택 (필수)</p>\n                  {/* select box */}\n                  <div className=\"relative flex flex-col\">\n                    <button\n                      onClick={handleTypeClick}\n                      type=\"button\"\n                      className=\"input-default input-select-default w-[98%]\"\n                      placeholder=\"견종을 선택해주세요.\"\n                    >\n                      {selectType}\n                      {focus ? <ArrowClose /> : <ArrowOpen />}\n                    </button>\n                    {!breed && (\n                      <span className=\"mt-8 text-12 text-red-400\">\n                        {selectErr}\n                      </span>\n                    )}\n                    {focus && (\n                      <div className=\"dropdown-box top-[58px] z-50 w-[98%] text-black-900\">\n                        <ul className=\"ul profile dropdown-ul\">\n                          {breedArr.map((el, idx) => {\n                            const activeClass =\n                              activeIndex === idx ? 'font-bold' : '';\n\n                            return (\n                              <li\n                                id={idx}\n                                className={`li profile${idx} w-full cursor-pointer p-12 text-14 ${activeClass} rounded-lg hover:bg-black-025`}\n                                onClick={() => typeActive(idx)}\n                                role=\"presentation\"\n                              >\n                                {el}\n                              </li>\n                            );\n                          })}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n            {/* 버튼 */}\n            <Button\n              className=\"color-yellow btn-size-l absolute bottom-[30px] w-[calc(100%-60px)]\"\n              onClick={() => handlePostProfile()}\n            >\n              프로필 등록하기\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"fixed left-0 top-0 z-30 h-[100vh] w-[100vw] bg-[rgba(0,0,0,0.7)] onlyMobile:hidden\" />\n    </>\n  );\n}\nexport default ProfileCreateModal;\n","/Users/jieun/Desktop/main-project/idle/src/components/List/ListNotice.jsx",["406"],[],"import { useEffect, useState } from 'react';\nimport Parser from 'html-react-parser';\nimport dateCalculate from '../dateCalculate';\nimport profile from '../../images/profile.png';\n\nfunction ListNotice(props) {\n  const { post, onClick } = props;\n  const [content, setContent] = useState('');\n\n  useEffect(() => {\n    // 게시물 미리보기 텍스트\n    const regex = /<p>(.*?)<\\/p>/gi;\n    const matches = post.content.match(regex);\n    let extractedText = '';\n\n    if (matches) {\n      extractedText = matches\n        .map(match => {\n          const text = match.replace(/<\\/?p>/g, '');\n          const textWithoutImg = text.replace(/<img.*?>/, '');\n          return textWithoutImg.trim();\n        })\n        .join(' ');\n    }\n\n    setContent(extractedText);\n  }, [setContent, post.content]);\n\n  return (\n    <div>\n      <ul>\n        <li className=\"list-flex w-full\">\n          <div className=\"flex w-full flex-col justify-start\">\n            <p className=\"list-title h-text-max mb-8 max-h-[30px]\">\n              {post.title}\n            </p>\n            {Parser(`\n           <p className=\"list-content h-text-max max-h-[50px] onlyMobile:max-h-[38px] onlyMobile:min-w-180\">\n          ${content}\n          </p>\n          `)}\n\n            <span className=\"list-gray-small mt-16\">\n              {dateCalculate(post.createdAt)}\n            </span>\n          </div>\n          <div className=\"user-profile ml-24 h-108 w-108  onlyMobile:h-96 onlyMobile:w-96 onlyMini:h-56 onlyMini:w-56\">\n            {post.imageUrl ? (\n              <img src={post.imageUrl} alt=\"img\" />\n            ) : (\n              <img src={profile} alt=\"defaultImage\" />\n            )}\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n}\nexport default ListNotice;\n","/Users/jieun/Desktop/main-project/idle/src/components/List/ListReview.jsx",["407","408"],[],"import { useState } from 'react';\nimport axios from 'axios';\nimport RatingStar from '../RatingStar';\nimport Button from '../Button/Button';\nimport dateCalculate from '../dateCalculate';\nimport ConfirmReview from './ConfirmReview';\nimport { ReactComponent as StarOn } from '../../images/star-on.svg';\nimport { ReactComponent as StarOff } from '../../images/star-off.svg';\nimport imageNull from '../../images/imageNull.png';\n\nfunction ListReview({ post, className }) {\n  // post.ratedReview 따라서 별 보이기\n  const [reviewModal, setReviewModal] = useState(false);\n  const [kinderInfo, setKinderInfo] = useState([]);\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  const onReviewModal = () => {\n    setReviewModal(true);\n    axios\n      .get(`${apiUrl}/api/review/${post.reviewId}`)\n      .then(response => {\n        setKinderInfo(response.data.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const offReviewModal = () => {\n    setReviewModal(false);\n  };\n\n  const starScore = () => {\n    const ratedStar = Math.floor(post.ratedReview);\n    const ratingStar = [];\n\n    for (let i = 1; i <= 5; i += 1) {\n      if (i <= ratedStar) {\n        ratingStar.push(<StarOn key={i} />);\n      } else {\n        ratingStar.push(<StarOff key={i} />);\n      }\n    }\n    return ratingStar.map(star => star);\n  };\n\n  return (\n    <div>\n      <ul>\n        <li className=\"list-flex w-full\">\n          <div className=\"w-full\">\n            <div className=\"flex w-full items-center justify-between\">\n              <div className=\"flex w-full\">\n                <div className={className}>\n                  <div className=\"user-profile mr-16 h-40 w-40\">\n                    <img src={post.profileImageUrl} alt=\"profileImage\" />\n                  </div>\n                </div>\n                <div className=\"flex w-full flex-col\">\n                  <div className={className}>\n                    <div className=\"mb-4 flex\">\n                      {/* <div className=\"mb-4 grid w-full grid-cols-[auto-fit_minmax(200px,_1fr)]\"> */}\n                      {/* grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); */}\n                      <p className=\"mr-4 text-16 font-bold onlyMobile:text-14\">\n                        {post.profileName}\n                      </p>\n                      <p className=\"text-14 text-black-350 onlyMobile:text-12\">\n                        {post.email}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex w-full items-center justify-between\">\n                    <div className=\"flex\">{starScore()}</div>\n                    <p className=\"list-gray-small\">\n                      {dateCalculate(post.createdAt)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <p className=\"list-content h-text-max mt-16 max-h-[50px] onlyMobile:max-h-[40px] onlyMobile:min-w-180\">\n              {post.content}\n            </p>\n            <Button\n              className=\"btn-text-default py-4 text-left text-14 font-bold text-black-900\"\n              onClick={onReviewModal}\n            >\n              자세히 보기\n            </Button>\n          </div>\n          <div className=\"user-profile ml-24 h-108 w-108 onlyMobile:h-96 onlyMobile:w-96 onlyMini:h-56 onlyMini:w-56\">\n            {post.reviewImageUrl === null ? (\n              <img src={imageNull} alt=\"이미지가 없습니다.\" />\n            ) : (\n              <img src={post.reviewImageUrl} alt=\"리뷰이미지\" />\n            )}\n          </div>\n          {reviewModal ? (\n            <ConfirmReview\n              offReviewModal={offReviewModal}\n              name={post.profileName}\n              kinderInfo={kinderInfo}\n              kindergartenName={post.kindergartenName}\n              kindergartenLocations={post.kindergartenLocations}\n              kindergartenImageUrl={post.kindergartenImageUrl}\n              kindergartenRatedReviewsAvg={post.kindergartenRatedReviewsAvg}\n              // kindergartenRatedReviewsCount={post.kindergartenRatedReviewsCount}\n            />\n          ) : null}\n        </li>\n      </ul>\n    </div>\n  );\n}\nexport default ListReview;\n","/Users/jieun/Desktop/main-project/idle/src/components/List/ListCommunity.jsx",["409","410","411","412"],[],"import { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Parser from 'html-react-parser';\nimport cls from '../../utils/tailwind';\nimport dateCalculate from '../dateCalculate';\nimport { ReactComponent as View } from '../../images/view.svg';\nimport { ReactComponent as PerpettOff } from '../../images/perpett-off.svg';\nimport profile from '../../images/profile.png';\nimport imageNull from '../../images/imageNull.png';\n\nfunction ListCommunity(props) {\n  const { post, onClick, className } = props;\n  const [content, setContent] = useState('');\n  const { id } = useParams();\n\n  // 썸네일용\n  const thumImage = post.content;\n  const regex = /<img src=\"(.*?)\">/i;\n  const matches = thumImage.match(regex);\n  const thumbnail = matches ? matches[1] : null;\n\n  useEffect(() => {\n    // 게시물 미리보기 텍스트\n    const regex = /<p>(.*?)<\\/p>/gi;\n    const matches = post.content.match(regex);\n    let extractedText = '';\n\n    if (matches) {\n      extractedText = matches\n        .map(match => {\n          const text = match.replace(/<\\/?p>/g, '');\n          const textWithoutImg = text.replace(/<img.*?>/, '');\n          return textWithoutImg.trim();\n        })\n        .join(' ');\n    }\n\n    setContent(extractedText);\n  }, [setContent, post.content]);\n\n  return (\n    <li className=\"flex w-full items-center\" key={post.postId}>\n      <div className=\"user-profile mr-24 h-108 w-108 onlyMobile:mr-15 onlyMobile:h-96 onlyMobile:w-96 onlyMini:h-56 onlyMini:w-56\">\n        {thumbnail ? (\n          <img src={thumbnail} alt=\"img\" />\n        ) : (\n          <img src={imageNull} alt=\"이미지가 없습니다.\" />\n        )}\n      </div>\n      <div className=\"my-30 w-[calc(100%-132px)] onlyMobile:w-[calc(100%-101px)] onlyMini:my-20 onlyMini:w-[calc(100%-71px)]\">\n        <Link to={`/community/${id}/post/${post.postId}`} className=\"block\">\n          <p className=\"list-title truncate\">{post.title}</p>\n          {Parser(`\n          <p className=\"list-content mt-5 truncate text-max\">\n            ${content.replace(/(<([^>]+)>)/gi, '')}\n          </p>\n          `)}\n        </Link>\n        <div className=\"mt-16 flex items-center justify-between onlyMini:mt-8\">\n          <div className=\"flex-between flex onlyMini:flex-col \">\n            <div className={className}>\n              <div className=\"user-profile-small\">\n                {post.profileImageUrl ? (\n                  <img src={post.profileImageUrl} alt=\"img\" />\n                ) : (\n                  <img src={profile} alt=\"defaultImage\" />\n                )}\n              </div>\n              <p className=\"after:content=[''] list-line onlyMini: relative shrink-0 pl-5 pr-12 text-14 font-bold text-black-900 onlyMobile:text-12 onlyMini:after:hidden\">\n                {post.name}\n              </p>\n            </div>\n            <div className=\"flex onlyMini:hidden\">\n              <p className=\"list-gray-small flex items-center pr-12\">\n                <View width=\"16\" height=\"16\" className=\"mr-5\" />\n                <span className=\"mr-4 onlyMobile:hidden\">조회</span>\n                {post.views}\n              </p>\n              <p className=\"list-gray-small flex items-center\">\n                <PerpettOff width=\"16\" height=\"16\" className=\"mr-5\" />\n                <span className=\"mr-4 onlyMobile:hidden\">좋아요</span>{' '}\n                {post.likeCount}\n              </p>\n            </div>\n          </div>\n          <p className=\"flex items-center text-14 text-black-350 onlyMobile:text-12\">\n            {post.modified && (\n              <span className=\" mr-6 rounded-[4px] bg-black-025 px-4 py-2 text-10 text-black-350\">\n                수정\n              </span>\n            )}\n            {post.modifiedAt\n              ? dateCalculate(post.modifiedAt)\n              : dateCalculate(post.createdAt)}\n          </p>\n        </div>\n      </div>\n    </li>\n  );\n}\nexport default ListCommunity;\n","/Users/jieun/Desktop/main-project/idle/src/components/List/ConfirmReview.jsx",["413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432"],[],"import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Swal from 'sweetalert2';\nimport {\n  setCurProfile,\n  setAuth,\n  setCurUser,\n  setActiveIndex,\n  setUser,\n} from '../../actions/areaFilterActions';\n\nimport Dog from '../../images/dog.jpeg';\nimport RatingStar from '../RatingStar';\nimport dateCalculate from '../dateCalculate';\nimport TextArea from '../TextArea';\nimport UploadImage from '../UploadImage';\nimport Button from '../Button/Button';\nimport profile from '../../images/profile.png';\nimport Modal from '../../pages/Modal';\nimport { ReactComponent as Star } from '../../images/star-on.svg';\nimport { ReactComponent as Close } from '../../images/close.svg';\nimport { ReactComponent as StarOff } from '../../images/star-off.svg';\n\nfunction ConfirmReview(props) {\n  const {\n    offReviewModal,\n    kinderInfo,\n    kindergartenName,\n    kindergartenLocations,\n    kindergartenImageUrl,\n    kindergartenRatedReviewsAvg,\n    kindergartenRatedReviewsCount,\n  } = props;\n  const dispatch = useDispatch();\n\n  const [text, setText] = useState('');\n  const apiUrl = process.env.REACT_APP_API_URL;\n  const [starIndex, setStarIndex] = useState(0);\n  const [editModal, setEditModal] = useState(false);\n  const [prevImage, setPrevImage] = useState('');\n  const auth = useSelector(state => state.auth);\n  const navi = useNavigate();\n\n  const starScore = () => {\n    const ratedStar = Math.floor(kinderInfo.ratedReview);\n    const ratingStar = [];\n\n    for (let i = 1; i <= 5; i += 1) {\n      if (i <= ratedStar) {\n        ratingStar.push(<Star key={i} />);\n      } else {\n        ratingStar.push(<StarOff key={i} />);\n      }\n    }\n    return ratingStar.map(star => star);\n  };\n\n  const onEditModal = () => {\n    setEditModal(true);\n  };\n\n  const offEditModal = () => {\n    setEditModal(false);\n  };\n\n  const deleteReview = () => {\n    if (!auth) {\n      Swal.fire({\n        icon: 'error',\n        text: '로그인을 먼저 해주세요❗️',\n        confirmButtonColor: '#FFD337',\n      }).then(res => {\n        navi('/login');\n      });\n    } else {\n      Swal.fire({\n        // title: '댓글을 삭제하시겠습니까?',\n        text: '후기를 삭제하시겠습니까?',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#FFD337',\n        cancelButtonColor: '#ffffff',\n        confirmButtonText: '네',\n        cancelButtonText: '<span style=\"color:#000000\">아니오<span>',\n      }).then(result => {\n        axios\n          .delete(`${apiUrl}/api/review/${kinderInfo.reviewId}`, {\n            headers: {\n              Authorization: localStorage.getItem('token'),\n            },\n          })\n          .then(response => {\n            Swal.fire({\n              confirmButtonColor: '#FFD337',\n              text: '후기가 삭제되었습니다.',\n            }).then(result => {\n              window.location.reload();\n            });\n          })\n          .catch(error => {\n            if (error.response && error.response.status === 403) {\n              Swal.fire({\n                icon: 'error',\n                text: '본인이 작성한 후기만 삭제할 수 있어요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n            } else if (error.response && error.response.status === 401) {\n              Swal.fire({\n                icon: 'error',\n                text: '토큰이 만료되었습니다. 재로그인 해주세요❗️',\n                confirmButtonColor: '#FFD337',\n              });\n              dispatch(setAuth(false));\n              localStorage.removeItem('token');\n            }\n          });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (kinderInfo.reviewImageUrl) {\n      setPrevImage(kinderInfo.reviewImageUrl);\n    }\n  }, [kinderInfo.image, kinderInfo.reviewImageUrl]);\n\n  return (\n    <>\n      <div className=\"absolute left-[50%] flex justify-center\">\n        <div className=\"fixed top-[10px] z-40 my-80 h-[calc(100vh-160px)] w-608 rounded-[16px] bg-white onlyMobile:left-0 onlyMobile:top-0 onlyMobile:my-0 onlyMobile:h-full onlyMobile:w-full onlyMobile:rounded-0\">\n          <div className=\"relative flex h-full w-[100%] flex-col p-30 onlyMobile:p-24\">\n            <div>\n              <div className=\"relative flex justify-center\">\n                <button\n                  type=\"button\"\n                  className=\"absolute right-0 top-[-4px]\"\n                  onClick={() => offReviewModal()}\n                >\n                  <Close />\n                </button>\n              </div>\n              <div className=\"mb-24 mt-30 flex w-600\">\n                <div className=\"flex w-full items-center justify-between\">\n                  <div className=\"flex w-full\">\n                    <div className=\"list-user-image mr-16\">\n                      <img\n                        src={kinderInfo.profileImageUrl}\n                        alt=\"profileImg\"\n                        className=\"rounded-xl\"\n                      />\n                    </div>\n                    <div className=\"flex w-full flex-col\">\n                      <div className=\"flex items-center gap-2\">\n                        <p className=\"text-16 font-bold onlyMobile:text-14\">\n                          {kinderInfo.profileName}\n                        </p>\n                        <p className=\"text-14 text-black-350 onlyMobile:text-12\">\n                          {kinderInfo.email}\n                        </p>\n                      </div>\n                      <div className=\"flex w-full items-center justify-between\">\n                        <div className=\"star flex\">{starScore()}</div>\n                        <p className=\"list-gray-small pr-[10%]\">\n                          {dateCalculate(kinderInfo.createdAt)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                {/* <div className=\"mr-24 h-[75%] w-full\">\n                  <p className=\"list-content h-text-max mt-16 max-h-[50px]\">\n                    {kinderInfo.contents}\n                  </p>\n                  {kinderInfo.imageUrl ? (\n                    <img src={kinderInfo.imageUrl} alt=\"img\" />\n                  ) : (\n                    ''\n                  )}\n                </div> */}\n              </div>\n              <div className=\"h-[calc(80vh-160px)]\">\n                <div className=\"flex h-[calc(80vh-160px)] flex-col overflow-auto px-8\">\n                  <p className=\"mb-24\">{kinderInfo.content}</p>\n\n                  {kinderInfo.reviewImageUrl ? (\n                    <div className=\"w-[100%] flex-col\">\n                      <img src={kinderInfo.reviewImageUrl} alt=\"reviewImg\" />\n                    </div>\n                  ) : (\n                    <p className=\"text-black-350\">\n                      리뷰에 등록된 사진이 없습니다...🥹\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"absolute bottom-0 z-10 w-548 bg-white onlyMobile:w-[calc(100%-48px)]\">\n              <div className=\"mr-10 flex flex-col py-12\">\n                <div className=\"flex justify-end\">\n                  <button\n                    className=\"mr-15 text-14 text-black-350 onlyMobile:text-12\"\n                    type=\"button\"\n                    onClick={() => {\n                      // offReviewModal();\n                      onEditModal();\n                    }}\n                  >\n                    수정\n                  </button>\n                  <button\n                    className=\"text-14 text-black-350 onlyMobile:text-12\"\n                    type=\"button\"\n                    onClick={deleteReview}\n                  >\n                    삭제\n                  </button>\n                </div>\n              </div>\n              <div className=\"mb-25 flex border-t-[1px] border-black-070 pt-25\">\n                <div className=\"user-profile mr-15 h-116 w-116 onlyMobile:h-96 onlyMobile:w-96\">\n                  {kindergartenImageUrl ? (\n                    <img src={kindergartenImageUrl} alt=\"유치원이미지\" />\n                  ) : (\n                    <img src={profile} alt=\"defaultImage\" />\n                  )}\n                </div>\n                <div className=\"flex flex-col justify-center\">\n                  <p className=\"write-title\">\n                    {kindergartenName &&\n                      kindergartenName.slice().replace(/\"/g, '')}\n                  </p>\n                  <p className=\"flex items-center text-14\">\n                    <Star />\n                    {kindergartenRatedReviewsAvg?.toFixed(2)}\n                    {kinderInfo.kindergartenRatedReview?.toFixed(2)}\n                  </p>\n                  <p className=\"mt-6 text-14\">\n                    {kindergartenLocations?.slice().replace(/\"/g, '')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          {editModal ? (\n            <Modal\n              className=\"absolute left-0 top-0\"\n              title=\"후기 수정하기\"\n              onClick={offEditModal}\n              prevRatedReview={kinderInfo.ratedReview}\n              prevText={kinderInfo.content}\n              prevImage={prevImage}\n              setPrevImage={setPrevImage}\n              reviewId={kinderInfo.reviewId}\n            />\n          ) : null}\n        </div>\n      </div>\n      <div className=\"fixed left-0 top-0 z-30 h-[100vh] w-[100vw] bg-[rgba(0,0,0,0.4)] onlyMobile:hidden\" />\n    </>\n  );\n}\nexport default ConfirmReview;\n","/Users/jieun/Desktop/main-project/idle/src/components/Radio/RadioGroup.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/Radio/Radio.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/utils/tailwind.js",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/UploadImage.jsx",["433","434"],[],"import { useState, useRef } from 'react';\nimport cls from '../utils/tailwind';\n\nfunction ProfileUploadImage(props) {\n  const { className, setImage, image, prevImage, setPrevImage } = props;\n\n  const [display, setDisplay] = useState('');\n\n  const fileInput = useRef(null);\n\n  const handleFileChange = e => {\n    const uploadFile = e.target.files[0];\n    if (prevImage) {\n      setPrevImage(uploadFile);\n    }\n    if (uploadFile) {\n      setImage(uploadFile);\n    } else {\n      setImage('');\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setDisplay(reader.result);\n      }\n    };\n    reader.readAsDataURL(uploadFile);\n  };\n\n  return (\n    <div className=\"h-80 w-80\">\n      {/* <label htmlFor=\"uploadImage\" className=\"cursor-pointer\"> */}\n      {image || prevImage ? (\n        <div\n          className=\"user-profile h-80 w-80 overflow-hidden\"\n          onClick={() => {\n            fileInput.current.click();\n          }}\n          onKeyDown={() => {}}\n          tabIndex={0}\n          role=\"button\"\n        >\n          <img src={display || prevImage} alt=\"Uploaded\" />\n        </div>\n      ) : (\n        <div\n          className=\"flex-center mr-10 flex h-80 w-80 rounded-[8px] bg-black-050\"\n          onClick={() => {\n            fileInput.current.click();\n          }}\n          onKeyDown={() => {}}\n          tabIndex={0}\n          role=\"button\"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M10.9999 1.51474C10.9999 0.962455 10.5522 0.51474 9.99993 0.51474C9.44765 0.51474 8.99993 0.962455 8.99993 1.51474V9.00002L1.51465 9.00002C0.962364 9.00002 0.514648 9.44773 0.514648 10C0.514648 10.5523 0.962364 11 1.51465 11H8.99993V18.4853C8.99993 19.0376 9.44765 19.4853 9.99993 19.4853C10.5522 19.4853 10.9999 19.0376 10.9999 18.4853V11H18.4852C19.0375 11 19.4852 10.5523 19.4852 10C19.4852 9.44774 19.0375 9.00002 18.4852 9.00002L10.9999 9.00002V1.51474Z\"\n              fill=\"#9199A1\"\n            />\n          </svg>\n        </div>\n      )}\n      <input\n        id=\"uploadImage\"\n        type=\"file\"\n        ref={fileInput}\n        accept=\"image/jpg, image/png, image/jpeg\"\n        className=\"hidden\"\n        onChange={handleFileChange}\n      />\n      {/* </label> */}\n    </div>\n  );\n}\nexport default ProfileUploadImage;\n","/Users/jieun/Desktop/main-project/idle/src/components/RatingStar.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/utils/quillEditor.js",["435","436","437","438","439"],[],"import React, { useMemo, useCallback, memo, useRef, useState } from 'react';\nimport axios from 'axios';\nimport ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nconst QuillEditor = memo(\n  ({ content, setContent, contents, setContents, postId, setImg }) => {\n    const quillRef = useRef(null);\n    const [previewImage, setPreviewImage] = useState(null);\n\n    const imageHandler = useCallback(() => {\n      const input = document.createElement('input');\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', 'image/*');\n      input.click();\n\n      input.onchange = async () => {\n        const file = input.files[0];\n        // setImg(prevImg => [...prevImg, file]);\n\n        const uploadData = new FormData();\n        uploadData.append('image', file);\n\n        try {\n          const response = await axios.post(\n            'https://api.imgbb.com/1/upload',\n            uploadData,\n            {\n              params: {\n                key: '8cb7f3bf3855c3503ff3954bf87159bf',\n              },\n            },\n          );\n\n          const imageUrl = response.data.data.url;\n\n          const quill = quillRef.current.getEditor();\n          const range = quill.getSelection(true);\n\n          quill.insertEmbed(range.index, 'image', imageUrl);\n          quill.setSelection(range.index + 1);\n        } catch (error) {\n          console.error('Error uploading image:', error);\n        }\n      };\n    }, []);\n\n    const modules = useMemo(\n      () => ({\n        toolbar: {\n          container: [\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n            [{ size: ['small', false, 'large', 'huge'] }, { color: [] }],\n            [\n              { list: 'ordered' },\n              { list: 'bullet' },\n              { indent: '-1' },\n              { indent: '+1' },\n              { align: [] },\n            ],\n            ['image'],\n          ],\n          handlers: {\n            image: imageHandler,\n          },\n        },\n      }),\n      [imageHandler],\n    );\n\n    return (\n      <ReactQuill\n        style={{ height: '400px' }}\n        ref={quillRef}\n        value={postId ? contents : content}\n        onChange={postId ? setContents : setContent}\n        modules={modules}\n        theme=\"snow\"\n        placeholder=\"내용을 입력해주세요.\"\n      />\n    );\n  },\n);\n\nexport default QuillEditor;\n","/Users/jieun/Desktop/main-project/idle/src/pages/OauthLogin.jsx",["440","441"],[],"import { useNavigate } from 'react-router-dom';\nimport { PulseLoader } from 'react-spinners';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport {\n  setAuth,\n  // setCurUser,\n  setUser,\n  setCurProfile,\n  setActiveIndex,\n} from '../actions/areaFilterActions';\n\nfunction OauthLogin() {\n  const navi = useNavigate();\n  const dispatch = useDispatch();\n\n  const url = new URL(window.location.href);\n  const authorization = url.searchParams.get('Authorization');\n  const refresh = url.searchParams.get('Refresh');\n\n  const getUsers = () => {\n    if (localStorage.getItem('token')) {\n      axios\n        .get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n          headers: {\n            Authorization: localStorage.getItem('token'),\n          },\n        })\n        .then(res => {\n          dispatch(setUser(res.data));\n          dispatch(setCurProfile(res.data[0]));\n          axios\n            .get(\n              `${process.env.REACT_APP_API_URL}/api/users/profile/currentProfile`,\n              {\n                headers: {\n                  Authorization: localStorage.getItem('token'),\n                },\n              },\n            )\n            .then(res => {\n              dispatch(setCurProfile(res.data.data));\n              dispatch(setActiveIndex(res.data.data.profileId));\n              navi('/');\n            });\n        })\n        .catch(err => {\n          console.log(err);\n        });\n    }\n  };\n\n  if (authorization) {\n    dispatch(setAuth(true));\n    localStorage.setItem('token', authorization);\n    localStorage.setItem('tokenRefresh', refresh);\n    getUsers();\n  } else if (!authorization) {\n    navi('/login');\n\n    Swal.fire({\n      icon: 'error',\n      text: '로그인에 실패했습니다.',\n      confirmButtonColor: '#FFD337',\n    });\n  }\n\n  return (\n    <div className=\"flex-center h-[50vh] w-[100%]\">\n      <PulseLoader color=\"#FFD337\" />\n    </div>\n  );\n}\n\nexport default OauthLogin;\n","/Users/jieun/Desktop/main-project/idle/src/pages/OauthRole.jsx",["442","443","444","445","446"],[],"import axios from 'axios';\nimport { useMediaQuery } from 'react-responsive';\nimport { useCallback, useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Button from '../components/Button/Button';\nimport Input from '../components/Input/Input';\nimport RadioGroup from '../components/Radio/RadioGroup';\nimport Radio from '../components/Radio/Radio';\nimport Toast from '../utils/toast';\n\nfunction OauthRole() {\n  const navi = useNavigate();\n  const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n  const [user, setUser] = useState({\n    email: '',\n    checkTeacher: '',\n  });\n\n  const [officials, setOfficials] = useState(false);\n\n  const [emailErr, setEmailErr] = useState('');\n  const [isEmail, setIsEmail] = useState(false);\n\n  const handleOfficialsClick = value => () => {\n    setOfficials(value);\n  };\n\n  const url = new URL(window.location.href);\n  const authorization = url.searchParams.get('Authorization');\n  const userEmail = url.searchParams.get('email');\n\n  const onCheckEmail = useCallback(\n    e => {\n      const valiEmail = /^[a-zA-Z0-9_.-]+$/;\n      const CurrentEmail = e.target.value;\n      const lastCharactor = CurrentEmail.slice(-1);\n      setUser({ ...user, email: CurrentEmail });\n\n      if (user.email.length === 0) {\n        setEmailErr('이메일을 입력해주세요.');\n        setIsEmail(false);\n      } else if (!valiEmail.test(lastCharactor)) {\n        e.target.value = CurrentEmail.slice(0, -1);\n        setEmailErr('영문, 숫자, _, -, . 만 입력이 가능합니다.');\n        setIsEmail(false);\n      } else {\n        setEmailErr('');\n        setIsEmail(true);\n      }\n    },\n    [user],\n  );\n\n  const onRoleChange = e => {\n    e.preventDefault();\n    onCheckEmail(e);\n\n    if (isEmail) {\n      setEmailErr('');\n\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/users/oauthInit`,\n          {\n            email: `${user.email}@kakao.com`,\n            checkOfficials: officials,\n          },\n          {\n            headers: {\n              Authorization: authorization,\n            },\n          },\n        )\n        .then(res => {\n          navi('/login');\n          setIsEmail(false);\n        })\n        .catch(err => {\n          if (err.response && err.response.status === 500) {\n            setEmailErr('이미 가입되어 있는 이메일입니다.');\n          } else {\n            Toast.fire({\n              title: '계정 저장을 다시 시도해주세요.',\n              background: '#DE4F54',\n              color: 'white',\n            });\n          }\n        });\n    }\n\n    if (userEmail) {\n      axios\n        .patch(\n          `${process.env.REACT_APP_API_URL}/api/users/oauthInit`,\n          {\n            checkOfficials: officials,\n          },\n          {\n            headers: {\n              Authorization: authorization,\n            },\n          },\n        )\n        .then(res => {\n          navi('/login');\n          console.log(res);\n          setIsEmail(false);\n        })\n        .catch(err => {\n          console.log(err);\n          if (err.response && err.response.status === 500) {\n            setEmailErr('이미 가입되어 있는 이메일입니다.');\n          }\n        });\n    }\n  };\n\n  const oauthrole = () => {\n    return (\n      <form className=\"px-8\" onSubmit={onRoleChange}>\n        <div className=\"mb-24 flex flex-col\">\n          <p className=\"mb-8 text-left text-14 text-black-350\">\n            생성 계정 선택\n          </p>\n          <RadioGroup>\n            <Radio\n              id=\"1\"\n              name=\"contact\"\n              value=\"user\"\n              onClick={handleOfficialsClick(false)}\n              defaultChecked\n            >\n              견주님\n            </Radio>\n            <Radio\n              id=\"2\"\n              name=\"contact\"\n              value=\"owner\"\n              onClick={handleOfficialsClick(true)}\n            >\n              유치원 관계자\n            </Radio>\n          </RadioGroup>\n        </div>\n        <div className=\"mb-24\">\n          {!userEmail ? (\n            <>\n              <div className=\"flex grow gap-2\">\n                <Input\n                  labelText=\"이메일\"\n                  type=\"email\"\n                  placeholder=\"이메일 입력해주세요.\"\n                  onChange={onCheckEmail}\n                />\n                <Input\n                  className=\"mt-26\"\n                  value=\"@kakao.com\"\n                  disabled=\"@kakao.com\"\n                />\n              </div>\n              {emailErr ? (\n                <p className=\"input-text text-red-400\">{emailErr}</p>\n              ) : (\n                ''\n              )}\n            </>\n          ) : (\n            <Input\n              labelText=\"이메일\"\n              type=\"email\"\n              placeholder=\"이메일 입력해주세요.\"\n              value={userEmail}\n              disabled={userEmail}\n            />\n          )}\n        </div>\n        <Button\n          className=\"color-yellow btn-size-l w-full\"\n          onClick={onRoleChange}\n        >\n          계정 정보 저장하기\n        </Button>\n      </form>\n    );\n  };\n\n  return (\n    <div className=\"flex-center onlyMobile:login-m-align h-screen bg-black-025 onlyMobile:bg-white\">\n      <div className=\"mt-80 onlyMobile:w-full onlyMobile:px-24\">\n        {!isMobile ? (\n          <div className=\"login-card\">{oauthrole()}</div>\n        ) : (\n          <div>{oauthrole()}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default OauthRole;\n","/Users/jieun/Desktop/main-project/idle/src/utils/dropdown.js",["447","448","449"],["450"],"import axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport Button from '../components/Button/Button';\nimport { setUser } from '../actions/areaFilterActions';\n\nimport Profile from '../images/profile.png';\n\nfunction RenderProfile({ clickedProfile, handleDelete }) {\n  const dispatch = useDispatch();\n\n  const user = useSelector(state => state.user);\n  const activeIndex = useSelector(state => state.activeIndex);\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n        headers: {\n          Authorization: localStorage.getItem('token'),\n        },\n      })\n      .then(res => {\n        console.log(res);\n        dispatch(setUser(res.data));\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderProfile = () => {\n    return user.map(profile => {\n      const activeClass = profile.profileId === activeIndex ? 'font-bold' : '';\n      const shouldDisplayButton = profile.profileId !== activeIndex;\n\n      return (\n        <li className=\"flex w-full\" key={profile.profileId}>\n          <div\n            className={`profile flex items-center justify-start${profile.profileId} cursor-pointer px-8 py-12 text-14 ${activeClass} w-full rounded-lg hover:bg-black-025`}\n            onClick={e => {\n              clickedProfile(profile.profileId);\n            }}\n            role=\"presentation\"\n          >\n            <div className=\"flex w-full\">\n              {profile.profileId === activeIndex && (\n                <div className=\"user-profile mr-10 inline-block h-24 w-24 rounded-md\">\n                  <img src={profile.imageUrl || Profile} alt=\"profileimage\" />\n                </div>\n              )}\n              {profile.name}\n            </div>\n          </div>\n          {shouldDisplayButton && user.length > 1 && (\n            <Button\n              className=\"btn-text-default w-40 text-red-400 onlyMobile:text-12\"\n              onClick={() => handleDelete(profile.profileId)}\n            >\n              삭제\n            </Button>\n          )}\n        </li>\n      );\n    });\n  };\n\n  return <>{renderProfile()}</>;\n}\n\nexport default RenderProfile;\n","/Users/jieun/Desktop/main-project/idle/src/OffFooter.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/components/OnFooter.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/pages/OauthFail.jsx",[],[],"/Users/jieun/Desktop/main-project/idle/src/utils/toast.js",[],[],{"ruleId":"451","severity":1,"message":"452","line":5,"column":10,"nodeType":"453","messageId":"454","endLine":5,"endColumn":18},{"ruleId":"451","severity":1,"message":"455","line":23,"column":10,"nodeType":"453","messageId":"454","endLine":23,"endColumn":23},{"ruleId":"456","replacedBy":"457"},{"ruleId":"458","replacedBy":"459"},{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","replacedBy":"465"},{"ruleId":"451","severity":1,"message":"466","line":65,"column":10,"nodeType":"453","messageId":"454","endLine":65,"endColumn":13},{"ruleId":"467","severity":2,"message":"468","line":86,"column":6,"nodeType":"469","endLine":86,"endColumn":18,"suggestions":"470","suppressions":"471"},{"ruleId":"451","severity":1,"message":"472","line":2,"column":40,"nodeType":"453","messageId":"454","endLine":2,"endColumn":53},{"ruleId":"451","severity":1,"message":"473","line":71,"column":15,"nodeType":"453","messageId":"454","endLine":71,"endColumn":18},{"ruleId":"451","severity":1,"message":"474","line":91,"column":15,"nodeType":"453","messageId":"454","endLine":91,"endColumn":23},{"ruleId":"451","severity":1,"message":"474","line":187,"column":17,"nodeType":"453","messageId":"454","endLine":187,"endColumn":25},{"ruleId":"451","severity":1,"message":"475","line":191,"column":21,"nodeType":"453","messageId":"454","endLine":191,"endColumn":27},{"ruleId":"476","severity":1,"message":"477","line":197,"column":13,"nodeType":"478","messageId":"479","endLine":197,"endColumn":24},{"ruleId":"451","severity":1,"message":"474","line":270,"column":13,"nodeType":"453","messageId":"454","endLine":270,"endColumn":21},{"ruleId":"476","severity":1,"message":"477","line":272,"column":9,"nodeType":"478","messageId":"479","endLine":272,"endColumn":20},{"ruleId":"480","severity":1,"message":"481","line":414,"column":15,"nodeType":"482","messageId":"483","endLine":414,"endColumn":43},{"ruleId":"467","severity":2,"message":"484","line":54,"column":6,"nodeType":"469","endLine":54,"endColumn":8,"suggestions":"485","suppressions":"486"},{"ruleId":"451","severity":1,"message":"487","line":3,"column":20,"nodeType":"453","messageId":"454","endLine":3,"endColumn":29},{"ruleId":"451","severity":1,"message":"488","line":5,"column":23,"nodeType":"453","messageId":"454","endLine":5,"endColumn":34},{"ruleId":"476","severity":1,"message":"477","line":53,"column":11,"nodeType":"478","messageId":"479","endLine":53,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":86,"column":13,"nodeType":"453","messageId":"454","endLine":86,"endColumn":16},{"ruleId":"451","severity":1,"message":"489","line":30,"column":9,"nodeType":"453","messageId":"454","endLine":30,"endColumn":13},{"ruleId":"451","severity":1,"message":"490","line":31,"column":9,"nodeType":"453","messageId":"454","endLine":31,"endColumn":16},{"ruleId":"451","severity":1,"message":"491","line":32,"column":9,"nodeType":"453","messageId":"454","endLine":32,"endColumn":19},{"ruleId":"476","severity":1,"message":"477","line":49,"column":9,"nodeType":"478","messageId":"479","endLine":49,"endColumn":20},{"ruleId":"451","severity":1,"message":"492","line":3,"column":23,"nodeType":"453","messageId":"454","endLine":3,"endColumn":31},{"ruleId":"451","severity":1,"message":"493","line":6,"column":3,"nodeType":"453","messageId":"454","endLine":6,"endColumn":19},{"ruleId":"451","severity":1,"message":"491","line":22,"column":9,"nodeType":"453","messageId":"454","endLine":22,"endColumn":19},{"ruleId":"451","severity":1,"message":"487","line":1,"column":20,"nodeType":"453","messageId":"454","endLine":1,"endColumn":29},{"ruleId":"451","severity":1,"message":"494","line":1,"column":31,"nodeType":"453","messageId":"454","endLine":1,"endColumn":37},{"ruleId":"451","severity":1,"message":"495","line":3,"column":8,"nodeType":"453","messageId":"454","endLine":3,"endColumn":13},{"ruleId":"451","severity":1,"message":"496","line":15,"column":8,"nodeType":"453","messageId":"454","endLine":15,"endColumn":21},{"ruleId":"451","severity":1,"message":"497","line":27,"column":8,"nodeType":"453","messageId":"454","endLine":27,"endColumn":20},{"ruleId":"451","severity":1,"message":"466","line":58,"column":10,"nodeType":"453","messageId":"454","endLine":58,"endColumn":13},{"ruleId":"476","severity":1,"message":"477","line":124,"column":9,"nodeType":"478","messageId":"479","endLine":124,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":143,"column":13,"nodeType":"453","messageId":"454","endLine":143,"endColumn":16},{"ruleId":"451","severity":1,"message":"498","line":24,"column":10,"nodeType":"453","messageId":"454","endLine":24,"endColumn":13},{"ruleId":"451","severity":1,"message":"499","line":85,"column":22,"nodeType":"453","messageId":"454","endLine":85,"endColumn":27},{"ruleId":"480","severity":1,"message":"500","line":189,"column":11,"nodeType":"482","messageId":"483","endLine":190,"endColumn":116},{"ruleId":"451","severity":1,"message":"501","line":28,"column":11,"nodeType":"453","messageId":"454","endLine":28,"endColumn":13},{"ruleId":"451","severity":1,"message":"502","line":34,"column":9,"nodeType":"453","messageId":"454","endLine":34,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":66,"column":19,"nodeType":"453","messageId":"454","endLine":66,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":92,"column":19,"nodeType":"453","messageId":"454","endLine":92,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":164,"column":23,"nodeType":"453","messageId":"454","endLine":164,"endColumn":26},{"ruleId":"451","severity":1,"message":"473","line":228,"column":23,"nodeType":"453","messageId":"454","endLine":228,"endColumn":26},{"ruleId":"451","severity":1,"message":"473","line":266,"column":17,"nodeType":"453","messageId":"454","endLine":266,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":286,"column":23,"nodeType":"453","messageId":"454","endLine":286,"endColumn":26},{"ruleId":"451","severity":1,"message":"473","line":333,"column":21,"nodeType":"453","messageId":"454","endLine":333,"endColumn":24},{"ruleId":"480","severity":1,"message":"503","line":391,"column":29,"nodeType":"482","messageId":"483","endLine":391,"endColumn":70},{"ruleId":"467","severity":2,"message":"504","line":100,"column":6,"nodeType":"469","endLine":100,"endColumn":8,"suggestions":"505","suppressions":"506"},{"ruleId":"451","severity":1,"message":"507","line":23,"column":10,"nodeType":"453","messageId":"454","endLine":23,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":82,"column":17,"nodeType":"453","messageId":"454","endLine":82,"endColumn":20},{"ruleId":"476","severity":1,"message":"477","line":163,"column":11,"nodeType":"478","messageId":"479","endLine":163,"endColumn":22},{"ruleId":"451","severity":1,"message":"487","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":19},{"ruleId":"451","severity":1,"message":"507","line":19,"column":10,"nodeType":"453","messageId":"454","endLine":19,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":188,"column":15,"nodeType":"453","messageId":"454","endLine":188,"endColumn":18},{"ruleId":"451","severity":1,"message":"508","line":19,"column":21,"nodeType":"453","messageId":"454","endLine":19,"endColumn":33},{"ruleId":"476","severity":1,"message":"477","line":48,"column":11,"nodeType":"478","messageId":"479","endLine":48,"endColumn":22},{"ruleId":"476","severity":1,"message":"477","line":61,"column":11,"nodeType":"478","messageId":"479","endLine":61,"endColumn":22},{"ruleId":"480","severity":1,"message":"509","line":14,"column":10,"nodeType":"482","messageId":"483","endLine":14,"endColumn":69},{"ruleId":"451","severity":1,"message":"510","line":41,"column":9,"nodeType":"453","messageId":"454","endLine":41,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":74,"column":9,"nodeType":"478","messageId":"479","endLine":74,"endColumn":20},{"ruleId":"451","severity":1,"message":"473","line":84,"column":15,"nodeType":"453","messageId":"454","endLine":84,"endColumn":18},{"ruleId":"451","severity":1,"message":"474","line":119,"column":17,"nodeType":"453","messageId":"454","endLine":119,"endColumn":25},{"ruleId":"451","severity":1,"message":"474","line":161,"column":17,"nodeType":"453","messageId":"454","endLine":161,"endColumn":25},{"ruleId":"476","severity":1,"message":"477","line":205,"column":20,"nodeType":"478","messageId":"479","endLine":205,"endColumn":31},{"ruleId":"511","severity":2,"message":"512","line":27,"column":38,"nodeType":"453","endLine":27,"endColumn":46,"suppressions":"513"},{"ruleId":"511","severity":2,"message":"512","line":27,"column":59,"nodeType":"453","endLine":27,"endColumn":67,"suppressions":"514"},{"ruleId":"511","severity":2,"message":"512","line":33,"column":7,"nodeType":"453","endLine":33,"endColumn":15,"suppressions":"515"},{"ruleId":"511","severity":2,"message":"512","line":35,"column":7,"nodeType":"453","endLine":35,"endColumn":15,"suppressions":"516"},{"ruleId":"451","severity":1,"message":"452","line":1,"column":10,"nodeType":"453","messageId":"454","endLine":1,"endColumn":18},{"ruleId":"451","severity":1,"message":"517","line":68,"column":18,"nodeType":"453","messageId":"454","endLine":68,"endColumn":21},{"ruleId":"480","severity":1,"message":"503","line":100,"column":11,"nodeType":"482","messageId":"483","endLine":100,"endColumn":163},{"ruleId":"451","severity":1,"message":"518","line":101,"column":20,"nodeType":"453","messageId":"454","endLine":101,"endColumn":21},{"ruleId":"480","severity":1,"message":"503","line":124,"column":11,"nodeType":"482","messageId":"483","endLine":124,"endColumn":71},{"ruleId":"467","severity":2,"message":"519","line":32,"column":6,"nodeType":"469","endLine":32,"endColumn":8,"suggestions":"520","suppressions":"521"},{"ruleId":"451","severity":1,"message":"522","line":8,"column":8,"nodeType":"453","messageId":"454","endLine":8,"endColumn":11},{"ruleId":"451","severity":1,"message":"523","line":25,"column":10,"nodeType":"453","messageId":"454","endLine":25,"endColumn":18},{"ruleId":"451","severity":1,"message":"524","line":32,"column":9,"nodeType":"453","messageId":"454","endLine":32,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":47,"column":15,"nodeType":"453","messageId":"454","endLine":47,"endColumn":18},{"ruleId":"451","severity":1,"message":"474","line":69,"column":15,"nodeType":"453","messageId":"454","endLine":69,"endColumn":23},{"ruleId":"451","severity":1,"message":"473","line":116,"column":15,"nodeType":"453","messageId":"454","endLine":116,"endColumn":18},{"ruleId":"451","severity":1,"message":"474","line":140,"column":19,"nodeType":"453","messageId":"454","endLine":140,"endColumn":27},{"ruleId":"451","severity":1,"message":"475","line":145,"column":25,"nodeType":"453","messageId":"454","endLine":145,"endColumn":31},{"ruleId":"451","severity":1,"message":"525","line":1,"column":10,"nodeType":"453","messageId":"454","endLine":1,"endColumn":23},{"ruleId":"451","severity":1,"message":"522","line":3,"column":8,"nodeType":"453","messageId":"454","endLine":3,"endColumn":11},{"ruleId":"480","severity":1,"message":"526","line":15,"column":14,"nodeType":"482","messageId":"483","endLine":15,"endColumn":101},{"ruleId":"480","severity":1,"message":"526","line":13,"column":14,"nodeType":"482","messageId":"483","endLine":13,"endColumn":84},{"ruleId":"480","severity":1,"message":"527","line":57,"column":15,"nodeType":"482","messageId":"483","endLine":57,"endColumn":65},{"ruleId":"480","severity":1,"message":"503","line":57,"column":15,"nodeType":"482","messageId":"483","endLine":57,"endColumn":65},{"ruleId":"480","severity":1,"message":"528","line":63,"column":19,"nodeType":"482","messageId":"483","endLine":63,"endColumn":129},{"ruleId":"480","severity":1,"message":"503","line":63,"column":19,"nodeType":"482","messageId":"483","endLine":63,"endColumn":129},{"ruleId":"467","severity":2,"message":"529","line":25,"column":6,"nodeType":"469","endLine":25,"endColumn":18,"suggestions":"530","suppressions":"531"},{"ruleId":"476","severity":1,"message":"477","line":17,"column":7,"nodeType":"478","messageId":"479","endLine":17,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":30,"column":7,"nodeType":"478","messageId":"479","endLine":30,"endColumn":18},{"ruleId":"480","severity":1,"message":"503","line":46,"column":13,"nodeType":"482","messageId":"483","endLine":46,"endColumn":158},{"ruleId":"451","severity":1,"message":"532","line":5,"column":17,"nodeType":"453","messageId":"454","endLine":5,"endColumn":31},{"ruleId":"451","severity":1,"message":"533","line":37,"column":10,"nodeType":"453","messageId":"454","endLine":37,"endColumn":18},{"ruleId":"451","severity":1,"message":"473","line":74,"column":15,"nodeType":"453","messageId":"454","endLine":74,"endColumn":18},{"ruleId":"451","severity":1,"message":"473","line":137,"column":17,"nodeType":"453","messageId":"454","endLine":137,"endColumn":20},{"ruleId":"451","severity":1,"message":"487","line":1,"column":20,"nodeType":"453","messageId":"454","endLine":1,"endColumn":29},{"ruleId":"451","severity":1,"message":"494","line":1,"column":31,"nodeType":"453","messageId":"454","endLine":1,"endColumn":37},{"ruleId":"476","severity":1,"message":"477","line":58,"column":11,"nodeType":"478","messageId":"479","endLine":58,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":107,"column":15,"nodeType":"453","messageId":"454","endLine":107,"endColumn":18},{"ruleId":"451","severity":1,"message":"473","line":146,"column":15,"nodeType":"453","messageId":"454","endLine":146,"endColumn":18},{"ruleId":"480","severity":1,"message":"527","line":260,"column":29,"nodeType":"482","messageId":"483","endLine":260,"endColumn":63},{"ruleId":"480","severity":1,"message":"503","line":260,"column":29,"nodeType":"482","messageId":"483","endLine":260,"endColumn":63},{"ruleId":"480","severity":1,"message":"528","line":268,"column":33,"nodeType":"482","messageId":"483","endLine":268,"endColumn":143},{"ruleId":"480","severity":1,"message":"503","line":268,"column":33,"nodeType":"482","messageId":"483","endLine":268,"endColumn":143},{"ruleId":"451","severity":1,"message":"534","line":7,"column":17,"nodeType":"453","messageId":"454","endLine":7,"endColumn":24},{"ruleId":"451","severity":1,"message":"535","line":3,"column":8,"nodeType":"453","messageId":"454","endLine":3,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":25,"column":9,"nodeType":"478","messageId":"479","endLine":25,"endColumn":20},{"ruleId":"451","severity":1,"message":"536","line":4,"column":8,"nodeType":"453","messageId":"454","endLine":4,"endColumn":11},{"ruleId":"451","severity":1,"message":"534","line":12,"column":17,"nodeType":"453","messageId":"454","endLine":12,"endColumn":24},{"ruleId":"480","severity":1,"message":"500","line":60,"column":16,"nodeType":"482","messageId":"483","endLine":60,"endColumn":64},{"ruleId":"480","severity":1,"message":"537","line":69,"column":18,"nodeType":"482","messageId":"483","endLine":69,"endColumn":171},{"ruleId":"451","severity":1,"message":"538","line":1,"column":31,"nodeType":"453","messageId":"454","endLine":1,"endColumn":42},{"ruleId":"451","severity":1,"message":"455","line":7,"column":3,"nodeType":"453","messageId":"454","endLine":7,"endColumn":16},{"ruleId":"451","severity":1,"message":"539","line":9,"column":3,"nodeType":"453","messageId":"454","endLine":9,"endColumn":13},{"ruleId":"451","severity":1,"message":"540","line":10,"column":3,"nodeType":"453","messageId":"454","endLine":10,"endColumn":17},{"ruleId":"451","severity":1,"message":"541","line":11,"column":3,"nodeType":"453","messageId":"454","endLine":11,"endColumn":10},{"ruleId":"451","severity":1,"message":"522","line":14,"column":8,"nodeType":"453","messageId":"454","endLine":14,"endColumn":11},{"ruleId":"451","severity":1,"message":"535","line":15,"column":8,"nodeType":"453","messageId":"454","endLine":15,"endColumn":18},{"ruleId":"451","severity":1,"message":"542","line":17,"column":8,"nodeType":"453","messageId":"454","endLine":17,"endColumn":16},{"ruleId":"451","severity":1,"message":"543","line":18,"column":8,"nodeType":"453","messageId":"454","endLine":18,"endColumn":19},{"ruleId":"451","severity":1,"message":"544","line":19,"column":8,"nodeType":"453","messageId":"454","endLine":19,"endColumn":14},{"ruleId":"451","severity":1,"message":"545","line":34,"column":5,"nodeType":"453","messageId":"454","endLine":34,"endColumn":34},{"ruleId":"451","severity":1,"message":"546","line":38,"column":10,"nodeType":"453","messageId":"454","endLine":38,"endColumn":14},{"ruleId":"451","severity":1,"message":"547","line":38,"column":16,"nodeType":"453","messageId":"454","endLine":38,"endColumn":23},{"ruleId":"451","severity":1,"message":"548","line":40,"column":10,"nodeType":"453","messageId":"454","endLine":40,"endColumn":19},{"ruleId":"451","severity":1,"message":"549","line":40,"column":21,"nodeType":"453","messageId":"454","endLine":40,"endColumn":33},{"ruleId":"451","severity":1,"message":"473","line":74,"column":15,"nodeType":"453","messageId":"454","endLine":74,"endColumn":18},{"ruleId":"451","severity":1,"message":"475","line":87,"column":15,"nodeType":"453","messageId":"454","endLine":87,"endColumn":21},{"ruleId":"451","severity":1,"message":"474","line":94,"column":17,"nodeType":"453","messageId":"454","endLine":94,"endColumn":25},{"ruleId":"451","severity":1,"message":"475","line":98,"column":21,"nodeType":"453","messageId":"454","endLine":98,"endColumn":27},{"ruleId":"480","severity":1,"message":"550","line":164,"column":30,"nodeType":"482","messageId":"483","endLine":164,"endColumn":51},{"ruleId":"451","severity":1,"message":"536","line":2,"column":8,"nodeType":"453","messageId":"454","endLine":2,"endColumn":11},{"ruleId":"451","severity":1,"message":"551","line":5,"column":11,"nodeType":"453","messageId":"454","endLine":5,"endColumn":20},{"ruleId":"451","severity":1,"message":"552","line":3,"column":22,"nodeType":"453","messageId":"454","endLine":3,"endColumn":27},{"ruleId":"451","severity":1,"message":"553","line":7,"column":58,"nodeType":"453","messageId":"454","endLine":7,"endColumn":64},{"ruleId":"451","severity":1,"message":"554","line":9,"column":12,"nodeType":"453","messageId":"454","endLine":9,"endColumn":24},{"ruleId":"451","severity":1,"message":"555","line":9,"column":26,"nodeType":"453","messageId":"454","endLine":9,"endColumn":41},{"ruleId":"476","severity":1,"message":"477","line":43,"column":11,"nodeType":"478","messageId":"479","endLine":43,"endColumn":24},{"ruleId":"451","severity":1,"message":"488","line":3,"column":23,"nodeType":"453","messageId":"454","endLine":3,"endColumn":34},{"ruleId":"476","severity":1,"message":"477","line":50,"column":11,"nodeType":"478","messageId":"479","endLine":50,"endColumn":22},{"ruleId":"451","severity":1,"message":"487","line":3,"column":33,"nodeType":"453","messageId":"454","endLine":3,"endColumn":42},{"ruleId":"451","severity":1,"message":"556","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":14},{"ruleId":"451","severity":1,"message":"473","line":75,"column":15,"nodeType":"453","messageId":"454","endLine":75,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":107,"column":11,"nodeType":"478","messageId":"479","endLine":107,"endColumn":22},{"ruleId":"476","severity":1,"message":"477","line":111,"column":11,"nodeType":"478","messageId":"479","endLine":111,"endColumn":22},{"ruleId":"476","severity":1,"message":"477","line":23,"column":9,"nodeType":"478","messageId":"479","endLine":23,"endColumn":20},{"ruleId":"480","severity":1,"message":"503","line":37,"column":13,"nodeType":"482","messageId":"483","endLine":37,"endColumn":172},{"ruleId":"451","severity":1,"message":"518","line":38,"column":22,"nodeType":"453","messageId":"454","endLine":38,"endColumn":23},{"ruleId":"467","severity":2,"message":"519","line":27,"column":6,"nodeType":"469","endLine":27,"endColumn":8,"suggestions":"557","suppressions":"558"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setCurProfile' is defined but never used.","lines-around-directive",["559"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"'map' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCenterValue'. Either include it or remove the dependency array.","ArrayExpression",["560"],["561"],"'useNavigation' is defined but never used.","'res' is defined but never used.","'response' is defined but never used.","'result' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","tailwindcss/no-custom-classname","Classname '!margin-0' is not a Tailwind CSS class!","JSXAttribute","customClassnameDetected","React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["562"],["563"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'user' is assigned a value but never used.","'curUser' is assigned a value but never used.","'curProfile' is assigned a value but never used.","'dispatch' is defined but never used.","'setKinderGartens' is defined but never used.","'useRef' is defined but never used.","'axios' is defined but never used.","'ConfirmReview' is defined but never used.","'SettingModal' is defined but never used.","'img' is assigned a value but never used.","'event' is defined but never used.","Classname 'flex-between' is not a Tailwind CSS class!","'id' is assigned a value but never used.","'activeIndex' is assigned a value but never used.","Classname 'profile' is not a Tailwind CSS class!","React Hook useEffect has missing dependencies: 'dispatch' and 'navi'. Either include them or remove the dependency array.",["564"],["565"],"'confirmPwd' is assigned a value but never used.","'setPageValue' is assigned a value but never used.","Classname 'gab-2' is not a Tailwind CSS class!","'starScore' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.",["566"],["567"],["568"],["569"],"'err' is defined but never used.","'e' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["570"],["571"],"'Dog' is defined but never used.","'onDelete' is assigned a value but never used.","'onDeleteModal' is assigned a value but never used.","'useMediaQuery' is defined but never used.","Classname 'justifty-center' is not a Tailwind CSS class!","Classname 'ul' is not a Tailwind CSS class!","Classname 'li' is not a Tailwind CSS class!","React Hook useEffect has a missing dependency: 'profiles'. Either include it or remove the dependency array.",["572"],["573"],"'HttpStatusCode' is defined but never used.","'isCurPwd' is assigned a value but never used.","'onClick' is assigned a value but never used.","'RatingStar' is defined but never used.","'cls' is defined but never used.","Classname 'after:content=['']' is not a Tailwind CSS class!","'useCallback' is defined but never used.","'setCurUser' is defined but never used.","'setActiveIndex' is defined but never used.","'setUser' is defined but never used.","'TextArea' is defined but never used.","'UploadImage' is defined but never used.","'Button' is defined but never used.","'kindergartenRatedReviewsCount' is assigned a value but never used.","'text' is assigned a value but never used.","'setText' is assigned a value but never used.","'starIndex' is assigned a value but never used.","'setStarIndex' is assigned a value but never used.","Classname 'star' is not a Tailwind CSS class!","'className' is assigned a value but never used.","'Quill' is defined but never used.","'setImg' is defined but never used.","'previewImage' is assigned a value but never used.","'setPreviewImage' is assigned a value but never used.","'Link' is defined but never used.",["574"],["575"],"padding-line-between-statements",{"desc":"576","fix":"577"},{"kind":"578","justification":"579"},{"desc":"580","fix":"581"},{"kind":"578","justification":"579"},{"desc":"582","fix":"583"},{"kind":"578","justification":"579"},{"kind":"578","justification":"579"},{"kind":"578","justification":"579"},{"kind":"578","justification":"579"},{"kind":"578","justification":"579"},{"desc":"584","fix":"585"},{"kind":"578","justification":"579"},{"desc":"586","fix":"587"},{"kind":"578","justification":"579"},{"desc":"584","fix":"588"},{"kind":"578","justification":"579"},"Update the dependencies array to be: [areaFilter, getCenterValue]",{"range":"589","text":"590"},"directive","","Update the dependencies array to be: [postId]",{"range":"591","text":"592"},"Update the dependencies array to be: [dispatch, navi]",{"range":"593","text":"594"},"Update the dependencies array to be: [dispatch]",{"range":"595","text":"596"},"Update the dependencies array to be: [areaFilter, profiles]",{"range":"597","text":"598"},{"range":"599","text":"596"},[1907,1919],"[areaFilter, getCenterValue]",[2050,2052],"[postId]",[3176,3178],"[dispatch, navi]",[927,929],"[dispatch]",[1098,1110],"[areaFilter, profiles]",[829,831]]