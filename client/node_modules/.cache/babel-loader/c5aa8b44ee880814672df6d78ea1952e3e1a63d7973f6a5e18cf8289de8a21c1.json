{"ast":null,"code":"var domhandler = require('domhandler');\nvar constants = require('./constants');\nvar CASE_SENSITIVE_TAG_NAMES = constants.CASE_SENSITIVE_TAG_NAMES;\nvar Comment = domhandler.Comment;\nvar Element = domhandler.Element;\nvar ProcessingInstruction = domhandler.ProcessingInstruction;\nvar Text = domhandler.Text;\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param {string} tagName - Tag name in lowercase.\n * @returns {string|undefined} - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param {NamedNodeMap} attributes - List of attributes.\n * @returns {object} - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute;\n  // `NamedNodeMap` is array-like\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param {string} tagName - Lowercase tag name.\n * @returns {string} - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param {NodeList} nodes - DOM nodes.\n * @param {Element|null} [parent=null] - Parent node.\n * @param {string} [directive] - Directive.\n * @returns {Array<Comment|Element|ProcessingInstruction|Text>}\n */\nfunction formatDOM(nodes, parent, directive) {\n  parent = parent || null;\n  var result = [];\n  var tagName;\n  for (var index = 0, len = nodes.length; index < len; index++) {\n    var node = nodes[index];\n    var current;\n\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1:\n        tagName = formatTagName(node.nodeName);\n        // script, style, or tag\n        current = new Element(tagName, formatAttributes(node.attributes));\n        current.children = formatDOM(\n        // template children are on content\n        tagName === 'template' ? node.content.childNodes : node.childNodes, current);\n        break;\n      case 3:\n        current = new Text(node.nodeValue);\n        break;\n      case 8:\n        current = new Comment(node.nodeValue);\n        break;\n      default:\n        continue;\n    }\n\n    // set previous node next\n    var prev = result[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n\n    // set properties for current node\n    current.parent = parent;\n    current.prev = prev;\n    current.next = null;\n    result.push(current);\n  }\n  if (directive) {\n    current = new ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n    current.next = result[0] || null;\n    current.parent = parent;\n    result.unshift(current);\n    if (result[1]) {\n      result[1].prev = result[0];\n    }\n  }\n  return result;\n}\nexports.formatAttributes = formatAttributes;\nexports.formatDOM = formatDOM;","map":{"version":3,"names":["domhandler","require","constants","CASE_SENSITIVE_TAG_NAMES","Comment","Element","ProcessingInstruction","Text","caseSensitiveTagNamesMap","tagName","i","len","length","toLowerCase","getCaseSensitiveTagName","formatAttributes","attributes","result","attribute","name","value","formatTagName","caseSensitiveTagName","formatDOM","nodes","parent","directive","index","node","current","nodeType","nodeName","children","content","childNodes","nodeValue","prev","next","push","substring","indexOf","unshift","exports"],"sources":["/Users/jieun/Desktop/main-project/idle/node_modules/html-dom-parser/lib/client/utilities.js"],"sourcesContent":["var domhandler = require('domhandler');\nvar constants = require('./constants');\n\nvar CASE_SENSITIVE_TAG_NAMES = constants.CASE_SENSITIVE_TAG_NAMES;\n\nvar Comment = domhandler.Comment;\nvar Element = domhandler.Element;\nvar ProcessingInstruction = domhandler.ProcessingInstruction;\nvar Text = domhandler.Text;\n\nvar caseSensitiveTagNamesMap = {};\nvar tagName;\n\nfor (var i = 0, len = CASE_SENSITIVE_TAG_NAMES.length; i < len; i++) {\n  tagName = CASE_SENSITIVE_TAG_NAMES[i];\n  caseSensitiveTagNamesMap[tagName.toLowerCase()] = tagName;\n}\n\n/**\n * Gets case-sensitive tag name.\n *\n * @param {string} tagName - Tag name in lowercase.\n * @returns {string|undefined} - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return caseSensitiveTagNamesMap[tagName];\n}\n\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param {NamedNodeMap} attributes - List of attributes.\n * @returns {object} - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var result = {};\n  var attribute;\n  // `NamedNodeMap` is array-like\n  for (var i = 0, len = attributes.length; i < len; i++) {\n    attribute = attributes[i];\n    result[attribute.name] = attribute.value;\n  }\n  return result;\n}\n\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param {string} tagName - Lowercase tag name.\n * @returns {string} - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param {NodeList} nodes - DOM nodes.\n * @param {Element|null} [parent=null] - Parent node.\n * @param {string} [directive] - Directive.\n * @returns {Array<Comment|Element|ProcessingInstruction|Text>}\n */\nfunction formatDOM(nodes, parent, directive) {\n  parent = parent || null;\n  var result = [];\n  var tagName;\n\n  for (var index = 0, len = nodes.length; index < len; index++) {\n    var node = nodes[index];\n    var current;\n\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1:\n        tagName = formatTagName(node.nodeName);\n        // script, style, or tag\n        current = new Element(tagName, formatAttributes(node.attributes));\n        current.children = formatDOM(\n          // template children are on content\n          tagName === 'template' ? node.content.childNodes : node.childNodes,\n          current\n        );\n        break;\n\n      case 3:\n        current = new Text(node.nodeValue);\n        break;\n\n      case 8:\n        current = new Comment(node.nodeValue);\n        break;\n\n      default:\n        continue;\n    }\n\n    // set previous node next\n    var prev = result[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n\n    // set properties for current node\n    current.parent = parent;\n    current.prev = prev;\n    current.next = null;\n\n    result.push(current);\n  }\n\n  if (directive) {\n    current = new ProcessingInstruction(\n      directive.substring(0, directive.indexOf(' ')).toLowerCase(),\n      directive\n    );\n    current.next = result[0] || null;\n    current.parent = parent;\n    result.unshift(current);\n\n    if (result[1]) {\n      result[1].prev = result[0];\n    }\n  }\n\n  return result;\n}\n\nexports.formatAttributes = formatAttributes;\nexports.formatDOM = formatDOM;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}